async function C($,z){const J=await crypto.subtle.importKey("raw",typeof $==="string"?x.encode($):$,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]);return crypto.subtle.sign("HMAC",J,x.encode(z))}async function f($){return crypto.subtle.digest("SHA-256",typeof $==="string"?x.encode($):$)}var q=function($){return Array.prototype.map.call(new Uint8Array($),(z)=>("0"+z.toString(16)).slice(-2)).join("")},u=function($){return $.replace(/[!'()*]/g,(z)=>"%"+z.charCodeAt(0).toString(16).toUpperCase())},z0=function($,z){const{hostname:J,pathname:W}=$;if(J.endsWith(".r2.cloudflarestorage.com"))return["s3","auto"];if(J.endsWith(".backblazeb2.com")){const P=J.match(/^(?:[^.]+\.)?s3\.([^.]+)\.backblazeb2\.com$/);return P!=null?["s3",P[1]]:["",""]}const Y=J.replace("dualstack.","").match(/([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(?:\.cn)?$/);let[X,Z]=(Y||["",""]).slice(1,3);if(Z==="us-gov")Z="us-gov-west-1";else if(Z==="s3"||Z==="s3-accelerate")Z="us-east-1",X="s3";else if(X==="iot")if(J.startsWith("iot."))X="execute-api";else if(J.startsWith("data.jobs.iot."))X="iot-jobs-data";else X=W==="/mqtt"?"iotdevicegateway":"iotdata";else if(X==="autoscaling"){const P=(z.get("X-Amz-Target")||"").split(".")[0];if(P==="AnyScaleFrontendService")X="application-autoscaling";else if(P==="AnyScaleScalingPlannerFrontendService")X="autoscaling-plans"}else if(Z==null&&X.startsWith("s3-"))Z=X.slice(3).replace(/^fips-|^external-1/,""),X="s3";else if(X.endsWith("-fips"))X=X.slice(0,-5);else if(Z&&/-\d$/.test(X)&&!/-\d$/.test(Z))[X,Z]=[Z,X];return[e[X]||X,Z]},x=new TextEncoder,e={appstream2:"appstream",cloudhsmv2:"cloudhsm",email:"ses",marketplace:"aws-marketplace",mobile:"AWSMobileHubService",pinpoint:"mobiletargeting",queue:"sqs","git-codecommit":"codecommit","mturk-requester-sandbox":"mturk-requester","personalize-runtime":"personalize"},$0=new Set(["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id","range","connection"]);class I{constructor({accessKeyId:$,secretAccessKey:z,sessionToken:J,service:W,region:Y,cache:X,retries:Z,initRetryMs:P}){if($==null)throw new TypeError("accessKeyId is a required option");if(z==null)throw new TypeError("secretAccessKey is a required option");this.accessKeyId=$,this.secretAccessKey=z,this.sessionToken=J,this.service=W,this.region=Y,this.cache=X||new Map,this.retries=Z!=null?Z:10,this.initRetryMs=P||50}async sign($,z){if($ instanceof Request){const{method:Y,url:X,headers:Z,body:P}=$;if(z=Object.assign({method:Y,url:X,headers:Z},z),z.body==null&&Z.has("Content-Type"))z.body=P!=null&&Z.has("X-Amz-Content-Sha256")?P:await $.clone().arrayBuffer();$=X}const J=new l(Object.assign({url:$},z,this,z&&z.aws)),W=Object.assign({},z,await J.sign());delete W.aws;try{return new Request(W.url.toString(),W)}catch(Y){if(Y instanceof TypeError)return new Request(W.url.toString(),Object.assign({duplex:"half"},W));throw Y}}async fetch($,z){for(let J=0;J<=this.retries;J++){const W=fetch(await this.sign($,z));if(J===this.retries)return W;const Y=await W;if(Y.status<500&&Y.status!==429)return Y;await new Promise((X)=>setTimeout(X,Math.random()*this.initRetryMs*Math.pow(2,J)))}throw new Error("An unknown error occurred, ensure retries is not negative")}}class l{constructor({method:$,url:z,headers:J,body:W,accessKeyId:Y,secretAccessKey:X,sessionToken:Z,service:P,region:D,cache:F,datetime:L,signQuery:j,appendSessionToken:A,allHeaders:s,singleEncode:r}){if(z==null)throw new TypeError("url is a required option");if(Y==null)throw new TypeError("accessKeyId is a required option");if(X==null)throw new TypeError("secretAccessKey is a required option");this.method=$||(W?"POST":"GET"),this.url=new URL(z),this.headers=new Headers(J||{}),this.body=W,this.accessKeyId=Y,this.secretAccessKey=X,this.sessionToken=Z;let k,m;if(!P||!D)[k,m]=z0(this.url,this.headers);if(this.service=P||k||"",this.region=D||m||"us-east-1",this.cache=F||new Map,this.datetime=L||(new Date()).toISOString().replace(/[:-]|\.\d{3}/g,""),this.signQuery=j,this.appendSessionToken=A||this.service==="iotdevicegateway",this.headers.delete("Host"),this.service==="s3"&&!this.signQuery&&!this.headers.has("X-Amz-Content-Sha256"))this.headers.set("X-Amz-Content-Sha256","UNSIGNED-PAYLOAD");const U=this.signQuery?this.url.searchParams:this.headers;if(U.set("X-Amz-Date",this.datetime),this.sessionToken&&!this.appendSessionToken)U.set("X-Amz-Security-Token",this.sessionToken);if(this.signableHeaders=["host",...this.headers.keys()].filter((Q)=>s||!$0.has(Q)).sort(),this.signedHeaders=this.signableHeaders.join(";"),this.canonicalHeaders=this.signableHeaders.map((Q)=>Q+":"+(Q==="host"?this.url.host:(this.headers.get(Q)||"").replace(/\s+/g," "))).join("\n"),this.credentialString=[this.datetime.slice(0,8),this.region,this.service,"aws4_request"].join("/"),this.signQuery){if(this.service==="s3"&&!U.has("X-Amz-Expires"))U.set("X-Amz-Expires","86400");U.set("X-Amz-Algorithm","AWS4-HMAC-SHA256"),U.set("X-Amz-Credential",this.accessKeyId+"/"+this.credentialString),U.set("X-Amz-SignedHeaders",this.signedHeaders)}if(this.service==="s3")try{this.encodedPath=decodeURIComponent(this.url.pathname.replace(/\+/g," "))}catch(Q){this.encodedPath=this.url.pathname}else this.encodedPath=this.url.pathname.replace(/\/+/g,"/");if(!r)this.encodedPath=encodeURIComponent(this.encodedPath).replace(/%2F/g,"/");this.encodedPath=u(this.encodedPath);const p=new Set;this.encodedSearch=[...this.url.searchParams].filter(([Q])=>{if(!Q)return!1;if(this.service==="s3"){if(p.has(Q))return!1;p.add(Q)}return!0}).map((Q)=>Q.map((w)=>u(encodeURIComponent(w)))).sort(([Q,w],[y,d])=>Q<y?-1:Q>y?1:w<d?-1:w>d?1:0).map((Q)=>Q.join("=")).join("&")}async sign(){if(this.signQuery){if(this.url.searchParams.set("X-Amz-Signature",await this.signature()),this.sessionToken&&this.appendSessionToken)this.url.searchParams.set("X-Amz-Security-Token",this.sessionToken)}else this.headers.set("Authorization",await this.authHeader());return{method:this.method,url:this.url,headers:this.headers,body:this.body}}async authHeader(){return["AWS4-HMAC-SHA256 Credential="+this.accessKeyId+"/"+this.credentialString,"SignedHeaders="+this.signedHeaders,"Signature="+await this.signature()].join(", ")}async signature(){const $=this.datetime.slice(0,8),z=[this.secretAccessKey,$,this.region,this.service].join();let J=this.cache.get(z);if(!J){const W=await C("AWS4"+this.secretAccessKey,$),Y=await C(W,this.region),X=await C(Y,this.service);J=await C(X,"aws4_request"),this.cache.set(z,J)}return q(await C(J,await this.stringToSign()))}async stringToSign(){return["AWS4-HMAC-SHA256",this.datetime,this.credentialString,q(await f(await this.canonicalString()))].join("\n")}async canonicalString(){return[this.method.toUpperCase(),this.encodedPath,this.encodedSearch,this.canonicalHeaders+"\n",this.signedHeaders,await this.hexBodyHash()].join("\n")}async hexBodyHash(){let $=this.headers.get("X-Amz-Content-Sha256")||(this.service==="s3"&&this.signQuery?"UNSIGNED-PAYLOAD":null);if($==null){if(this.body&&typeof this.body!=="string"&&!("byteLength"in this.body))throw new Error("body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header");$=q(await f(this.body||""))}return $}}var c=($,z)=>{const J=z.parseFromString($,"text/xml"),W=J.getElementsByTagName("ListBucketResult")[0],Y=J.getElementsByTagName("Contents");if(!W||!Y)throw new Error(`Invalid XML: ${$}`);const X=(Z,P)=>Z.getElementsByTagName(P)[0]?.textContent;return{$metadata:{},IsTruncated:X(W,"IsTruncated")==="true",Contents:Array.from(Y).map((Z)=>({ChecksumAlgorithm:[X(Z,"ChecksumAlgorithm")],ETag:X(Z,"ETag"),Key:X(Z,"Key"),LastModified:new Date(X(Z,"LastModified")),Owner:{DisplayName:X(Z,"DisplayName"),ID:X(Z,"ID")},Size:parseInt(X(Z,"Size")),StorageClass:X(Z,"StorageClass")})),Name:X(J,"Name"),Prefix:X(J,"Prefix"),Delimiter:X(J,"Delimiter"),MaxKeys:parseInt(X(J,"MaxKeys")),CommonPrefixes:Array.from(J.getElementsByTagName("CommonPrefixes")[0]?.getElementsByTagName("Prefix")||[]).map((Z)=>({Prefix:Z.textContent})),EncodingType:X(J,"EncodingType"),KeyCount:parseInt(X(J,"KeyCount")),ContinuationToken:X(J,"ContinuationToken"),NextContinuationToken:X(J,"NextContinuationToken"),StartAfter:X(J,"StartAfter")}};var V=async($,{retries:z=Number.MAX_VALUE,delay:J=100}={})=>{try{return await $()}catch(W){if(z>0)return await new Promise((Y)=>setTimeout(Y,J)),V($,{retries:z-1,delay:J});throw W}};class R{$;z;J;constructor($,z,J){this.fetch=$;this.endpoint=z;this.parser=J}getUrl($,z,J){return`${this.endpoint}/${$}${z?`/${z}`:""}${J||""}`}async listObjectV2($){for(let z=0;z<10;z++){const J=this.getUrl($.Bucket,void 0,`/?list-type=2&prefix=${$.Prefix}`),W=await V(()=>this.fetch(J,{}));if(W.status===200)return c(await W.text(),this.parser);else if(W.status===429)console.warn("listObjectV2: 429, retrying"),await new Promise((Y)=>setTimeout(Y,1000));else throw new Error(`Unexpected response: ${W.status} ${await W.text()}`)}throw new Error("Cannot contact server")}async putObject({Bucket:$,Key:z,Body:J,ChecksumSHA256:W}){const Y=this.getUrl($,z),X=await V(()=>this.fetch(Y,{method:"PUT",body:J,headers:{"Content-Type":"application/json",...W&&{"x-amz-content-sha256":W}}}));if(X.status!==200)throw new Error(`Failed to PUT: ${await X.text()}`);return{$metadata:{httpStatusCode:X.status},ETag:X.headers.get("ETag"),...X.headers.get("x-amz-version-id")&&{VersionId:X.headers.get("x-amz-version-id")}}}async deleteObject({Bucket:$,Key:z}){return{$metadata:{httpStatusCode:(await V(()=>this.fetch(this.getUrl($,z),{method:"DELETE"}))).status}}}async getObject({Bucket:$,Key:z,VersionId:J,IfNoneMatch:W}){const Y=this.getUrl($,z,J?`?versionId=${J}`:""),X=await V(()=>this.fetch(Y,{method:"GET",headers:{"If-None-Match":W}}));switch(X.status){case 304:throw new Error("304");case 404:return{$metadata:{httpStatusCode:404}};case 403:throw new Error("Access denied");default:{let Z;const P=X.headers.get("content-type"),D=await X.text();if(P==="application/json"||D&&D!=="")try{Z=JSON.parse(D)}catch(F){throw new Error(`Failed to parse response as JSON ${Y}`)}return{$metadata:{httpStatusCode:X.status},Body:Z,ETag:X.headers.get("ETag"),...X.headers.get("x-amz-version-id")&&{VersionId:X.headers.get("x-amz-version-id")}}}}}}class B{key;_vals;_keys;constructor($,z){if(this.key=$,this._vals=new Map,this._keys=new Map,z)for(let[J,W]of z)this.set(J,W)}get size(){return this._vals.size}set($,z){const J=this.key($);return this._vals.set(J,z),this._keys.set(J,$),this}get($){return this._vals.get(this.key($))}delete($){const z=this.key($);return this._keys.delete(z),this._vals.delete(z)}has($){return this._vals.has(this.key($))}values(){return this._vals.values()}keys(){return this._keys.values()}forEach($){return this._vals.forEach((z,J,W)=>$(z,this._keys.get(J)))}}var i=()=>`${Date.now()-200}`.padStart(14,"0"),n=()=>`${Date.now()+200}`.padStart(14,"0");var E=()=>crypto.randomUUID();var _=($)=>`${$.bucket}/${$.key}`,O=($,z)=>new URL(`${$}/${z.bucket}/${z.key}`);var M=($)=>JSON.parse(JSON.stringify($));var H=function($){return new Promise((z,J)=>{$.oncomplete=$.onsuccess=()=>z($.result),$.onabort=$.onerror=()=>J($.error)})},W0=function($,z){const J=indexedDB.open($);J.onupgradeneeded=()=>J.result.createObjectStore(z);const W=H(J);return(Y,X)=>W.then((Z)=>X(Z.transaction(z,Y).objectStore(z)))},K=function(){if(!h)h=W0("keyval-store","keyval");return h},S=function($,z=K()){return z("readonly",(J)=>H(J.get($)))},b=function($,z,J=K()){return J("readwrite",(W)=>{return W.put(z,$),H(W.transaction)})};var G=function($,z=K()){return z("readwrite",(J)=>{return J.delete($),H(J.transaction)})};var X0=function($,z){return $.openCursor().onsuccess=function(){if(!this.result)return;z(this.result),this.result.continue()},H($.transaction)},a=function($=K()){return $("readonly",(z)=>{if(z.getAllKeys)return H(z.getAllKeys());const J=[];return X0(z,(W)=>J.push(W.key)).then(()=>J)})};var h;var Y0=6;class v{session=E();proposedOperations=new Map;operationLabels=new Map;db;lastIndex=0;constructor($){this.db=$}async propose($,z){if(this.proposedOperations.set($,z),this.db){this.lastIndex++;const J=`entry-${this.lastIndex.toString().padStart(Y0,"0")}`;$[this.session]=this.lastIndex,await b(J,[...z.entries()].map(([W,Y])=>[W.toString(),Y]),this.db)}}async label($,z){if(this.operationLabels.set(z,$),this.db){const J=$[this.session];if(J===void 0)throw new Error("Cannot label an unproposed operation");await b(`label-${J}`,z,this.db)}}async confirm($){if(this.operationLabels.has($)){const z=this.operationLabels.get($);if(this.proposedOperations.delete(z),this.operationLabels.delete($),this.db){const J=z[this.session];await G(`entry-${J}`,this.db),await G(`label-${J}`,this.db)}}}async cancel($){let z;if(this.operationLabels.forEach((J,W)=>{if(J===$)this.operationLabels.delete(W)}),this.proposedOperations.delete($),this.db){const J=$[this.session];await G(`entry-${J}`,this.db),await G(`label-${J}`,this.db)}}flatten(){const $=new B((z)=>z.toString());return this.proposedOperations.forEach((z)=>{z.forEach((J,W)=>{$.set(W,J)})}),$}async restore($,z){this.db=$,this.proposedOperations.clear(),this.operationLabels.clear(),this.lastIndex=0;const W=(await a(this.db)).filter((Y)=>Y.startsWith("entry-")).sort();for(let Y of W){const X=parseInt(Y.split("-")[1]),Z=await S(Y,this.db),P=await S(`label-${X}`,this.db);if(!Z)continue;const D=Z.map(([j,A])=>[new URL(j),A]),F=new Map(D),L=z(F);if(L[this.session]=X,this.proposedOperations.set(L,F),P)this.label(L,P);this.lastIndex=Math.max(this.lastIndex,X)}}}function N($,z){if(Array.isArray(z)||typeof z!=="object"||z===null)return z;if(typeof $!=="object"||$===null)$={};for(let J in z)if(z[J]===null)delete $[J];else $[J]=N($[J],z[J]);return $}var T={previous:".",files:{},update:{}};class o{$;z;J;queue=Promise.resolve();constructor($,z,J){this.ref=$;this.handler=z;this.lastVersion=J}notify($,z,J){this.queue=this.queue.then(()=>J).then((W)=>{if(z!==this.lastVersion)console.log(`${$} NOTIFY ${_(this.ref)} ${z}`),this.lastVersion=z,this.handler(W)})}}class g{$;z;subscribers=new Set;poller;cache;pollInProgress=!1;authoritative_key="";authoritative_state=M(T);optimistic_state=M(T);operation_queue=new v;constructor($,z,J){this.service=$;this.ref=z;console.log("New manifest",z)}observeVersionId($){this.operation_queue.confirm($)}async get(){return this.getLatest().then(($)=>$||this.cache?.data)}async getLatest(){try{const $=await this.service._getObject({operation:"POLL_TIME",ref:this.ref,ifNoneMatch:this.cache?.etag});if($.$metadata.httpStatusCode===304)return;if($.data===void 0)this.authoritative_key=".";else this.authoritative_key=$.data;const z=await this.service.s3ClientLite.listObjectV2({Bucket:this.ref.bucket,Prefix:this.ref.key,StartAfter:this.authoritative_key});if(z.Contents===void 0)return this.authoritative_state=M(T),this.optimistic_state=M(T),this.authoritative_state;const J=`${this.ref.key}@${i()}`;for(let W=z.Contents.length-1;W>=0;W--){const Y=z.Contents[W].Key;if(Y==this.ref.key)continue;const X={bucket:this.ref.bucket,key:Y},Z=await this.service._getObject({operation:"LOOK_BACK",ref:X});if(Z.data===void 0){await this.service._deleteObject({operation:"CLEANUP",ref:X});continue}if(Z.data.previous<J){this.authoritative_key=Z.data.previous,this.authoritative_state=Z.data;break}}for(let W=0;W<z.Contents.length;W++){const Y=z.Contents[W].Key;if(Y==this.ref.key)continue;if(Y<this.authoritative_key)continue;const X=await this.service._getObject({operation:"SWEEP",ref:{bucket:this.ref.bucket,key:Y}}),Z=Y.substring(Y.lastIndexOf("@")+1);if(Z>=J)console.log("Optimistic update"),this.optimistic_state=N(this.optimistic_state,X.data?.update);else this.authoritative_state=N(this.authoritative_state,X.data?.update),this.optimistic_state=N(this.optimistic_state,X.data?.update),this.authoritative_key=Y;this.observeVersionId(Z)}return this.authoritative_state}catch($){if($.name==="NoSuchKey")return this.authoritative_state=T,this.authoritative_state;else throw $}}async poll(){if(this.pollInProgress)return;if(this.pollInProgress=!0,this.subscriberCount===0&&this.poller)clearInterval(this.poller),this.poller=void 0;if(this.subscriberCount>0&&!this.poller)this.poller=setInterval(()=>this.poll(),this.service.config.pollFrequency);const $=await this.getLatest();if($===void 0){this.pollInProgress=!1;return}const z=this.operation_queue.flatten();this.subscribers.forEach(async(J)=>{if(z.has(O(this.service.endpoint,J.ref)))J.notify(this.service.config.label,"local",Promise.resolve(z.get(O(this.service.endpoint,J.ref))));else{const W=$.files[_(J.ref)];if(W){const Y=this.service._getObject({operation:"GET_CONTENT",ref:J.ref,version:W.version});J.notify(this.service.config.label,W.version,Y.then((X)=>X.data))}else if(W===null)J.notify(this.service.config.label,void 0,Promise.resolve(void 0))}}),this.pollInProgress=!1}async updateContent($,z){this.operation_queue.propose(z,$);try{const J=await z,W=await this.get();W.previous=this.authoritative_key,W.update={files:{}};for(let[P,D]of J){const F=_(P);if(D){const L={version:D};W.update.files[F]=L}else W.update.files[F]=null}const Y=n()+"_"+E().substring(0,2),X=this.ref.key+"@"+Y;this.operation_queue.label(z,Y),await this.service._putObject({operation:"PUT_MANIFEST",ref:{key:X,bucket:this.ref.bucket},value:W});const Z=await this.service._putObject({operation:"PUT_POLL",ref:{key:this.ref.key,bucket:this.ref.bucket},value:this.authoritative_key});return this.poll(),Z}catch(J){throw console.error(J),this.operation_queue.cancel(z),J}}async getOptimisticVersion($){return await this.get(),this.optimistic_state.files[_($)]?.version}subscribe($,z){console.log(`SUBSCRIBE ${_($)} ${this.subscriberCount+1}`);const J=new o($,z);return this.subscribers.add(J),()=>this.subscribers.delete(J)}get subscriberCount(){return this.subscribers.size}}async function t($){const z=(new TextEncoder()).encode($),J=await crypto.subtle.digest("SHA-256",z);return[...new Uint8Array(J)].map((W)=>W.toString(16).padStart(2,"0")).join("")}class Z0{config;s3ClientLite;manifests=new B(_);getCache=new B(($)=>`${$.Bucket}${$.Key}${$.VersionId}${$.IfNoneMatch}`);endpoint;constructor($){if(this.config={...$,label:$.label||E().substring(0,3),useChecksum:$.useChecksum===!1?!1:!0,useVersioning:$.useVersioning||!1,pollFrequency:$.pollFrequency||1000,defaultManifest:{bucket:$.defaultManifest?.bucket||$.defaultBucket,key:typeof $.defaultManifest=="string"?$.defaultManifest:$.defaultManifest?.key||"manifest.json"}},this.config.s3Config?.credentials instanceof Function)throw Error("We can't do that yet");this.endpoint=$.s3Config.endpoint||`https://s3.${$.s3Config.region}.amazonaws.com`;let z;if(this.config.s3Config?.credentials){const J=new I({accessKeyId:this.config.s3Config.credentials.accessKeyId,secretAccessKey:this.config.s3Config.credentials.secretAccessKey,sessionToken:this.config.s3Config.credentials.sessionToken,region:this.config.s3Config.region||"us-east-1",service:"s3",retries:0});z=(...W)=>J.fetch(...W)}else z=(global||window).fetch.bind(global||window);this.s3ClientLite=new R(z,this.endpoint,$.parser||new DOMParser)}getOrCreateManifest($){if(!this.manifests.has($))this.manifests.set($,new g(this,$));return this.manifests.get($)}async get($,z={}){const J={...this.config.defaultManifest,...z.manifest},W=this.getOrCreateManifest(J),Y={bucket:$.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof $==="string"?$:$.key},X=W.operation_queue.flatten(),Z=O(this.endpoint,Y);if(X.has(Z))return console.log(`${this.config.label} get (cached) ${_(Y)}`),X.get(Z);const P=await W.getOptimisticVersion(Y);if(P===void 0)return;return(await this._getObject({operation:"GET",ref:Y,version:P})).data}async _getObject($){let z;if(this.config.useVersioning)z={Bucket:$.ref.bucket,Key:$.ref.key,IfNoneMatch:$.ifNoneMatch,...$.version&&{VersionId:$.version}};else z={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,IfNoneMatch:$.ifNoneMatch};if(this.getCache.has(z))return await this.getCache.get(z);const J=this.s3ClientLite.getObject(z).then(async(W)=>{const Y={...W,data:W.Body};return console.log(`${this.config.label} ${$.operation} ${$.ref.bucket}/${$.ref.key}@${$.version} => ${Y.VersionId}`),this.getCache.set(z,J),Y}).catch((W)=>{if(W?.name==="304")return{$metadata:{httpStatusCode:304},data:void 0};else throw W});return J}async delete($,z={}){return this.putAll(new Map([[$,void 0]]),z)}async put($,z,J={}){return this.putAll(new Map([[$,z]]),J)}async putAll($,z={}){const J=new B(_,[...$].map(([Y,X])=>[{bucket:Y.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof Y==="string"?Y:Y.key},X])),W=(z?.manifests||[this.config.defaultManifest]).map((Y)=>({...this.config.defaultManifest,...Y}));return this._putAll(J,{manifests:W})}async _putAll($,z){const J=new Map,W=new Promise(async(Y,X)=>{const Z=new Map,P=[];$.forEach((D,F)=>{if(D!==void 0){let L=this.config.useVersioning?void 0:E();J.set(O(this.endpoint,F),D),P.push(this._putObject({operation:"PUT_CONTENT",ref:F,value:D,version:L}).then((j)=>{if(this.config.useVersioning)if(j.VersionId===void 0)throw console.error(j),Error(`Bucket ${F.bucket} is not version enabled!`);else L=j.VersionId;Z.set(F,L)}))}else P.push(this._deleteObject({ref:F}).then((L)=>{Z.set(F,void 0)}))}),await Promise.all(P).catch(X),Y(Z)});return Promise.all(z.manifests.map((Y)=>{return this.getOrCreateManifest(Y).updateContent(J,W)}))}async _putObject($){const z=JSON.stringify($.value,null,2);let J;if(this.config.useVersioning)J={Bucket:$.ref.bucket,Key:$.ref.key,ContentType:"application/json",Body:z,...this.config.useChecksum&&{ChecksumSHA256:await t(z)}};else J={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,ContentType:"application/json",Body:z,...this.config.useChecksum&&{ChecksumSHA256:await t(z)}};const W=await this.s3ClientLite.putObject(J);return console.log(`${this.config.label} ${$.operation} ${J.Bucket}/${J.Key} => ${W.VersionId}`),W}async _deleteObject($){const z={Bucket:$.ref.bucket,Key:$.ref.key},J=await this.s3ClientLite.deleteObject(z);return console.log(`${this.config.label} ${$.operation||"DELETE"} ${$.ref.bucket}/${$.ref.key} => ${J.VersionId}`),J}subscribe($,z,J){const W={...this.config.defaultManifest,...J?.manifest},Y={key:typeof $==="string"?$:$.key,bucket:$.bucket||this.config.defaultBucket||W.bucket},X=this.getOrCreateManifest(W),Z=X.subscribe(Y,z);return this.get(Y,{manifest:W}).then((P)=>{console.log(`${this.config.label} NOTIFY (initial) ${_(Y)}`),queueMicrotask(()=>{z(P),X.poll()})}),Z}refresh(){return Promise.all([...this.manifests.values()].map(($)=>$.poll()))}get subscriberCount(){return[...this.manifests.values()].reduce(($,z)=>$+z.subscriberCount,0)}}export{Z0 as MPS3};
