async function M($,z){const W=await crypto.subtle.importKey("raw",typeof $==="string"?b.encode($):$,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]);return crypto.subtle.sign("HMAC",W,b.encode(z))}async function a($){return crypto.subtle.digest("SHA-256",typeof $==="string"?b.encode($):$)}var S=function($){return Array.prototype.map.call(new Uint8Array($),(z)=>("0"+z.toString(16)).slice(-2)).join("")},o=function($){return $.replace(/[!'()*]/g,(z)=>"%"+z.charCodeAt(0).toString(16).toUpperCase())},P0=function($,z){const{hostname:W,pathname:J}=$;if(W.endsWith(".r2.cloudflarestorage.com"))return["s3","auto"];if(W.endsWith(".backblazeb2.com")){const Q=W.match(/^(?:[^.]+\.)?s3\.([^.]+)\.backblazeb2\.com$/);return Q!=null?["s3",Q[1]]:["",""]}const X=W.replace("dualstack.","").match(/([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(?:\.cn)?$/);let[D,Z]=(X||["",""]).slice(1,3);if(Z==="us-gov")Z="us-gov-west-1";else if(Z==="s3"||Z==="s3-accelerate")Z="us-east-1",D="s3";else if(D==="iot")if(W.startsWith("iot."))D="execute-api";else if(W.startsWith("data.jobs.iot."))D="iot-jobs-data";else D=J==="/mqtt"?"iotdevicegateway":"iotdata";else if(D==="autoscaling"){const Q=(z.get("X-Amz-Target")||"").split(".")[0];if(Q==="AnyScaleFrontendService")D="application-autoscaling";else if(Q==="AnyScaleScalingPlannerFrontendService")D="autoscaling-plans"}else if(Z==null&&D.startsWith("s3-"))Z=D.slice(3).replace(/^fips-|^external-1/,""),D="s3";else if(D.endsWith("-fips"))D=D.slice(0,-5);else if(Z&&/-\d$/.test(D)&&!/-\d$/.test(Z))[D,Z]=[Z,D];return[O0[D]||D,Z]},b=new TextEncoder,O0={appstream2:"appstream",cloudhsmv2:"cloudhsm",email:"ses",marketplace:"aws-marketplace",mobile:"AWSMobileHubService",pinpoint:"mobiletargeting",queue:"sqs","git-codecommit":"codecommit","mturk-requester-sandbox":"mturk-requester","personalize-runtime":"personalize"},Y0=new Set(["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id","range","connection"]);class v{constructor({accessKeyId:$,secretAccessKey:z,sessionToken:W,service:J,region:X,cache:D,retries:Z,initRetryMs:Q}){if($==null)throw new TypeError("accessKeyId is a required option");if(z==null)throw new TypeError("secretAccessKey is a required option");this.accessKeyId=$,this.secretAccessKey=z,this.sessionToken=W,this.service=J,this.region=X,this.cache=D||new Map,this.retries=Z!=null?Z:10,this.initRetryMs=Q||50}async sign($,z){if($ instanceof Request){const{method:X,url:D,headers:Z,body:Q}=$;if(z=Object.assign({method:X,url:D,headers:Z},z),z.body==null&&Z.has("Content-Type"))z.body=Q!=null&&Z.has("X-Amz-Content-Sha256")?Q:await $.clone().arrayBuffer();$=D}const W=new t(Object.assign({url:$},z,this,z&&z.aws)),J=Object.assign({},z,await W.sign());delete J.aws;try{return new Request(J.url.toString(),J)}catch(X){if(X instanceof TypeError)return new Request(J.url.toString(),Object.assign({duplex:"half"},J));throw X}}async fetch($,z){for(let W=0;W<=this.retries;W++){const J=fetch(await this.sign($,z));if(W===this.retries)return J;const X=await J;if(X.status<500&&X.status!==429)return X;await new Promise((D)=>setTimeout(D,Math.random()*this.initRetryMs*Math.pow(2,W)))}throw new Error("An unknown error occurred, ensure retries is not negative")}}class t{constructor({method:$,url:z,headers:W,body:J,accessKeyId:X,secretAccessKey:D,sessionToken:Z,service:Q,region:O,cache:Y,datetime:U,signQuery:F,appendSessionToken:H,allHeaders:T,singleEncode:Q0}){if(z==null)throw new TypeError("url is a required option");if(X==null)throw new TypeError("accessKeyId is a required option");if(D==null)throw new TypeError("secretAccessKey is a required option");this.method=$||(J?"POST":"GET"),this.url=new URL(z),this.headers=new Headers(W||{}),this.body=J,this.accessKeyId=X,this.secretAccessKey=D,this.sessionToken=Z;let d,l;if(!Q||!O)[d,l]=P0(this.url,this.headers);if(this.service=Q||d||"",this.region=O||l||"us-east-1",this.cache=Y||new Map,this.datetime=U||(new Date()).toISOString().replace(/[:-]|\.\d{3}/g,""),this.signQuery=F,this.appendSessionToken=H||this.service==="iotdevicegateway",this.headers.delete("Host"),this.service==="s3"&&!this.signQuery&&!this.headers.has("X-Amz-Content-Sha256"))this.headers.set("X-Amz-Content-Sha256","UNSIGNED-PAYLOAD");const V=this.signQuery?this.url.searchParams:this.headers;if(V.set("X-Amz-Date",this.datetime),this.sessionToken&&!this.appendSessionToken)V.set("X-Amz-Security-Token",this.sessionToken);if(this.signableHeaders=["host",...this.headers.keys()].filter((P)=>T||!Y0.has(P)).sort(),this.signedHeaders=this.signableHeaders.join(";"),this.canonicalHeaders=this.signableHeaders.map((P)=>P+":"+(P==="host"?this.url.host:(this.headers.get(P)||"").replace(/\s+/g," "))).join("\n"),this.credentialString=[this.datetime.slice(0,8),this.region,this.service,"aws4_request"].join("/"),this.signQuery){if(this.service==="s3"&&!V.has("X-Amz-Expires"))V.set("X-Amz-Expires","86400");V.set("X-Amz-Algorithm","AWS4-HMAC-SHA256"),V.set("X-Amz-Credential",this.accessKeyId+"/"+this.credentialString),V.set("X-Amz-SignedHeaders",this.signedHeaders)}if(this.service==="s3")try{this.encodedPath=decodeURIComponent(this.url.pathname.replace(/\+/g," "))}catch(P){this.encodedPath=this.url.pathname}else this.encodedPath=this.url.pathname.replace(/\/+/g,"/");if(!Q0)this.encodedPath=encodeURIComponent(this.encodedPath).replace(/%2F/g,"/");this.encodedPath=o(this.encodedPath);const c=new Set;this.encodedSearch=[...this.url.searchParams].filter(([P])=>{if(!P)return!1;if(this.service==="s3"){if(c.has(P))return!1;c.add(P)}return!0}).map((P)=>P.map((x)=>o(encodeURIComponent(x)))).sort(([P,x],[i,n])=>P<i?-1:P>i?1:x<n?-1:x>n?1:0).map((P)=>P.join("=")).join("&")}async sign(){if(this.signQuery){if(this.url.searchParams.set("X-Amz-Signature",await this.signature()),this.sessionToken&&this.appendSessionToken)this.url.searchParams.set("X-Amz-Security-Token",this.sessionToken)}else this.headers.set("Authorization",await this.authHeader());return{method:this.method,url:this.url,headers:this.headers,body:this.body}}async authHeader(){return["AWS4-HMAC-SHA256 Credential="+this.accessKeyId+"/"+this.credentialString,"SignedHeaders="+this.signedHeaders,"Signature="+await this.signature()].join(", ")}async signature(){const $=this.datetime.slice(0,8),z=[this.secretAccessKey,$,this.region,this.service].join();let W=this.cache.get(z);if(!W){const J=await M("AWS4"+this.secretAccessKey,$),X=await M(J,this.region),D=await M(X,this.service);W=await M(D,"aws4_request"),this.cache.set(z,W)}return S(await M(W,await this.stringToSign()))}async stringToSign(){return["AWS4-HMAC-SHA256",this.datetime,this.credentialString,S(await a(await this.canonicalString()))].join("\n")}async canonicalString(){return[this.method.toUpperCase(),this.encodedPath,this.encodedSearch,this.canonicalHeaders+"\n",this.signedHeaders,await this.hexBodyHash()].join("\n")}async hexBodyHash(){let $=this.headers.get("X-Amz-Content-Sha256")||(this.service==="s3"&&this.signQuery?"UNSIGNED-PAYLOAD":null);if($==null){if(this.body&&typeof this.body!=="string"&&!("byteLength"in this.body))throw new Error("body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header");$=S(await a(this.body||""))}return $}}var r=($,z)=>{const W=z.parseFromString($,"text/xml");if(!W)throw new Error(`Invalid XML: ${$}`);const J=W.getElementsByTagName("Contents"),X=(D,Z)=>{const Q=D.getElementsByTagName(Z)[0]?.textContent;return Q?decodeURIComponent(Q.replace(/\+/g," ")):void 0};return{$metadata:{},Contents:Array.from(J).map((D)=>({ETag:X(D,"ETag"),Key:X(D,"Key")})),KeyCount:parseInt(X(W,"KeyCount")),ContinuationToken:X(W,"ContinuationToken"),NextContinuationToken:X(W,"NextContinuationToken"),StartAfter:X(W,"StartAfter")}};var q=async($,{retries:z=Number.MAX_VALUE,delay:W=100,max_delay:J=1e4}={})=>{try{return await $()}catch(X){if(z>0)return await new Promise((D)=>setTimeout(D,W)),q($,{retries:z-1,max_delay:J,delay:Math.min(W*1.5,J)});throw X}};class g{$;z;W;constructor($,z,W){this.fetch=$;this.endpoint=z;this.parser=W}getUrl($,z,W){return`${this.endpoint}/${$}${z?`/${encodeURIComponent(z)}`:""}${W||""}`}async listObjectV2($){for(let z=0;z<10;z++){const W=this.getUrl($.Bucket,void 0,`/?list-type=2&prefix=${$.Prefix}`),J=await q(()=>this.fetch(W,{}));if(J.status===200)return r(await J.text(),this.parser);else if(J.status===429)console.warn("listObjectV2: 429, retrying"),await new Promise((X)=>setTimeout(X,1000));else throw new Error(`Unexpected response: ${J.status} ${await J.text()}`)}throw new Error("Cannot contact server")}async putObject({Bucket:$,Key:z,Body:W,ChecksumSHA256:J}){const X=this.getUrl($,z),D=await q(()=>this.fetch(X,{method:"PUT",body:W,headers:{"Content-Type":"application/json",...J&&{"x-amz-content-sha256":J}}}));if(D.status!==200)throw new Error(`Failed to PUT: ${await D.text()}`);return{$metadata:{httpStatusCode:D.status},ETag:D.headers.get("ETag"),...D.headers.get("x-amz-version-id")&&{VersionId:D.headers.get("x-amz-version-id")}}}async deleteObject({Bucket:$,Key:z}){return{$metadata:{httpStatusCode:(await q(()=>this.fetch(this.getUrl($,z),{method:"DELETE"}))).status}}}async getObject({Bucket:$,Key:z,VersionId:W,IfNoneMatch:J}){const X=this.getUrl($,z,W?`?versionId=${W}`:""),D=await q(()=>this.fetch(X,{method:"GET",headers:{"If-None-Match":J}}));switch(D.status){case 304:throw new Error("304");case 404:return{$metadata:{httpStatusCode:404}};case 403:throw new Error("Access denied");default:{let Z;const Q=D.headers.get("content-type"),O=await D.text();if(Q==="application/json"||O&&O!=="")try{Z=JSON.parse(O)}catch(Y){throw new Error(`Failed to parse response as JSON ${X}`)}return{$metadata:{httpStatusCode:D.status},Body:Z,ETag:D.headers.get("ETag"),...D.headers.get("x-amz-version-id")&&{VersionId:D.headers.get("x-amz-version-id")}}}}}}class E{key;_vals;_keys;constructor($,z){if(this.key=$,this._vals=new Map,this._keys=new Map,z)for(let[W,J]of z)this.set(W,J)}get size(){return this._vals.size}set($,z){const W=this.key($);return this._vals.set(W,z),this._keys.set(W,$),this}get($){return this._vals.get(this.key($))}delete($){const z=this.key($);return this._keys.delete(z),this._vals.delete(z)}has($){return this._vals.has(this.key($))}values(){return this._vals.values()}keys(){return this._keys.values()}forEach($){return this._vals.forEach((z,W,J)=>$(z,this._keys.get(W)))}}var s=()=>`${Date.now()-200}`.padStart(14,"0"),e=()=>`${Date.now()+200}`.padStart(14,"0");var G=async($)=>{const z=Date.now(),W=await $,J=Date.now();return[W,J-z]};var _=()=>crypto.randomUUID();var B=($)=>`${$.bucket}/${$.key}`;var w=($)=>JSON.parse(JSON.stringify($));var j=function($){return new Promise((z,W)=>{$.oncomplete=$.onsuccess=()=>z($.result),$.onabort=$.onerror=()=>W($.error)})},A=function($,z){const W=indexedDB.open($);W.onupgradeneeded=()=>W.result.createObjectStore(z);const J=j(W);return(X,D)=>J.then((Z)=>D(Z.transaction(z,X).objectStore(z)))},N=function(){if(!p)p=A("keyval-store","keyval");return p},L=function($,z=N()){return z("readonly",(W)=>j(W.get($)))},C=function($,z,W=N()){return W("readwrite",(J)=>{return J.put(z,$),j(J.transaction)})};var $0=function($,z=N()){return z("readonly",(W)=>Promise.all($.map((J)=>j(W.get(J)))))};var z0=function($,z=N()){return z("readwrite",(W)=>{return W.delete($),j(W.transaction)})},R=function($,z=N()){return z("readwrite",(W)=>{return $.forEach((J)=>W.delete(J)),j(W.transaction)})};var U0=function($,z){return $.openCursor().onsuccess=function(){if(!this.result)return;z(this.result),this.result.continue()},j($.transaction)},h=function($=N()){return $("readonly",(z)=>{if(z.getAllKeys)return j(z.getAllKeys());const W=[];return U0(z,(J)=>W.push(J.key)).then(()=>W)})};var p;var B0=6,W0=($)=>`write-${$.toString().padStart(B0,"0")}`;class m{session=_();proposedOperations=new Map;operationLabels=new Map;db;lastIndex=0;load=void 0;constructor($){this.db=$}async propose($,z,W=!1){if(this.proposedOperations.set($,z),this.db){if(this.load&&!W)await this.load,this.proposedOperations.delete($),this.proposedOperations.set($,z);this.lastIndex++;const J=W0(this.lastIndex);$[this.session]=this.lastIndex,await C(J,[...z.entries()].map(([X,D])=>[JSON.stringify(X),D]),this.db),console.log(`STORE ${J} ${JSON.stringify([...z.entries()])}`)}}async label($,z,W=!1){if(this.operationLabels.set(z,$),this.db){if(this.load&&!W)await this.load;const J=$[this.session];if(J===void 0)throw new Error("Cannot label an unproposed operation");const X=`label-${J}`;await C(X,z,this.db),console.log(`STORE ${X} ${z}`)}}async confirm($,z=!1){if(this.operationLabels.has($)){const W=this.operationLabels.get($);if(this.proposedOperations.delete(W),this.operationLabels.delete($),this.db){if(this.load&&!z)await this.load;const J=W[this.session],X=[W0(J),`label-${J}`];await R(X,this.db),console.log(`DEL ${X}`)}}}async cancel($,z=!1){if(this.operationLabels.forEach((W,J)=>{if(W===$)this.operationLabels.delete(J)}),this.proposedOperations.delete($),this.db){if(this.load&&!z)await this.load;const W=$[this.session];await R([`write-${W}`,`label-${W}`],this.db)}}async flatten(){if(this.load)await this.load;const $=new E(B);return this.proposedOperations.forEach((z)=>{z.forEach((W,J)=>{$.set(J,W)})}),$}async restore($,z){return this.db=$,this.proposedOperations.clear(),this.operationLabels.clear(),this.lastIndex=0,this.load=new Promise(async(W)=>{const X=(await h(this.db)).filter((Z)=>Z.startsWith("write-")).sort();console.log("RESTORE",X);const D=await $0(X,this.db);for(let Z=0;Z<X.length;Z++){const Q=parseInt(X[Z].split("-")[1]);this.lastIndex=Math.max(this.lastIndex,Q)}for(let Z=0;Z<X.length;Z++){const Q=X[Z],O=parseInt(Q.split("-")[1]),Y=D[Z].map(([H,T])=>[JSON.parse(H),T]),U=await L(`label-${O}`,this.db);if(!Y)continue;const F=new Map(Y);await z(F,U),await R([`write-${O}`,`label-${O}`],this.db)}W(void 0)}),this.load}}function I($,z){if(Array.isArray(z)||typeof z!=="object"||z===null)return z;const W=typeof $!=="object"||$===null?{}:$;for(let J in z)if(z[J]===null)delete W[J];else W[J]=I(W[J],z[J]);return W}var f="manifest",K={previous:".",files:{},update:{}};class u{$;authoritative_key="";authoritative_state=w(K);optimistic_state=w(K);loading;cache;db;constructor($){this.manifest=$}async restore($){this.db=$,this.loading=L(f,$).then((z)=>{if(z)this.authoritative_state=z,this.optimistic_state=z,this.manifest.service.config.log(`RESTORE ${f}`)})}async getLatest(){if(this.loading)await this.loading;if(this.loading=void 0,!this.manifest.service.config.online)return this.authoritative_state;try{const $=await this.manifest.service._getObject({operation:"POLL_TIME",ref:this.manifest.ref,ifNoneMatch:this.cache?.etag,useCache:!1});if($.$metadata.httpStatusCode===304)return this.authoritative_state;if($.data===void 0)this.authoritative_key=".";else this.authoritative_key=$.data;const[z,W]=await G(this.manifest.service.s3ClientLite.listObjectV2({Bucket:this.manifest.ref.bucket,Prefix:this.manifest.ref.key,StartAfter:this.authoritative_key}));if(this.manifest.service.config.log(`${W}ms LIST ${this.manifest.ref.bucket}/${this.manifest.ref.key}`),z.Contents===void 0)return this.authoritative_state=w(K),this.optimistic_state=w(K),this.authoritative_state;const J=`${this.manifest.ref.key}@${s()}`;for(let X=z.Contents.length-1;X>=0;X--){const D=z.Contents[X].Key;if(D==this.manifest.ref.key)continue;const Z={bucket:this.manifest.ref.bucket,key:D},Q=await this.manifest.service._getObject({operation:"LOOK_BACK",ref:Z});if(Q.data===void 0){await this.manifest.service._deleteObject({operation:"CLEANUP",ref:Z});continue}if(Q.data.previous<J){this.authoritative_key=Q.data.previous,this.authoritative_state=Q.data;break}}for(let X=0;X<z.Contents.length;X++){const D=z.Contents[X].Key;if(D==this.manifest.ref.key)continue;if(D<this.authoritative_key)continue;const Z=await this.manifest.service._getObject({operation:"SWEEP",ref:{bucket:this.manifest.ref.bucket,key:D}}),Q=D.substring(D.lastIndexOf("@")+1);if(Q>=J)this.manifest.service.config.log("Optimistic update"),this.optimistic_state=I(this.optimistic_state,Z.data?.update);else this.authoritative_state=I(this.authoritative_state,Z.data?.update),this.optimistic_state=I(this.optimistic_state,Z.data?.update),this.authoritative_key=D;this.manifest.observeVersionId(Q)}if(this.db)C(f,this.authoritative_state,this.db);return this.authoritative_state}catch($){if($.name==="NoSuchKey")return this.authoritative_state=K,this.authoritative_state;else throw $}}}class J0{$;z;W;queue=Promise.resolve();constructor($,z,W){this.ref=$;this.handler=z;this.lastVersion=W}notify($,z,W){this.queue=this.queue.then(()=>W).then((J)=>{if(z!==this.lastVersion)$.config.log(`${$.config.label} NOTIFY ${B(this.ref)} ${z}`),this.lastVersion=z,this.handler(J)})}}class y{$;z;subscribers=new Set;poller;pollInProgress=!1;manifestState=new u(this);operationQueue=new m;constructor($,z){this.service=$;this.ref=z;console.log("Create manifest",B(z))}load($){this.manifestState.restore($),this.operationQueue.restore($,async(z,W)=>{if(!W)await this.service._putAll(z,{manifests:[this.ref],await:"local",isLoad:!0});else await this.updateContent(z,Promise.resolve(new Map([[this.ref,W]])),{await:"local",isLoad:!0})})}observeVersionId($){this.operationQueue.confirm($)}async poll(){if(this.pollInProgress)return;if(this.pollInProgress=!0,this.subscriberCount===0&&this.poller)clearInterval(this.poller),this.poller=void 0;if(this.subscriberCount>0&&!this.poller)this.poller=setInterval(()=>this.poll(),this.service.config.pollFrequency);const $=await this.manifestState.getLatest();if($===void 0){this.pollInProgress=!1;return}const z=await this.operationQueue.flatten();this.subscribers.forEach(async(W)=>{if(z.has(W.ref))W.notify(this.service,"local",Promise.resolve(z.get(W.ref)));else{const J=$.files[B(W.ref)];if(J){const X=this.service._getObject({operation:"GET_CONTENT",ref:W.ref,version:J.version});W.notify(this.service,J.version,X.then((D)=>D.data))}else if(J===null)W.notify(this.service,void 0,Promise.resolve(void 0))}}),this.pollInProgress=!1}updateContent($,z,W){const J=this.operationQueue.propose(z,$,W.isLoad),X=J.then(async()=>{try{const D=await z,Z=await this.manifestState.getLatest();Z.previous=this.manifestState.authoritative_key,Z.update={files:{}};for(let[U,F]of D){const H=B(U);if(F){const T={version:F};Z.update.files[H]=T}else Z.update.files[H]=null}const Q=e()+"_"+_().substring(0,2),O=this.ref.key+"@"+Q;this.operationQueue.label(z,Q,W.isLoad),await this.service._putObject({operation:"PUT_MANIFEST",ref:{key:O,bucket:this.ref.bucket},value:Z});const Y=await this.service._putObject({operation:"PUT_POLL",ref:{key:this.ref.key,bucket:this.ref.bucket},value:this.manifestState.authoritative_key});return this.poll(),Y}catch(D){throw console.error(D),this.operationQueue.cancel(z,W.isLoad),D}});if(W.await==="local")return J;else return X}async getOptimisticVersion($){return await this.manifestState.getLatest(),this.manifestState.optimistic_state.files[B($)]?.version}subscribe($,z){this.service.config.log(`SUBSCRIBE ${B($)} ${this.subscriberCount+1}`);const W=new J0($,z);return this.subscribers.add(W),()=>this.subscribers.delete(W)}get subscriberCount(){return this.subscribers.size}}var X0=async($,z)=>{const W=new URL($),J=new URLSearchParams(W.search),X=W.pathname.split("/"),D=X[1],Z=X.slice(2).join("/"),Q=A(D,"v0");let O,Y=200;if(J.get("list-type")){const U=J.get("prefix")||"";O=`<ListBucketResult>${(await h(Q)).filter((H)=>`${H}`.startsWith(U)).map((H)=>`<Contents><Key>${H}</Key></Contents>`)}</ListBucketResult>`}else if(z?.method==="GET")O=await L(Z,Q),Y=O===void 0?404:200;else if(z?.method==="PUT")O=await z.body,await C(Z,O,Q);else if(z?.method==="DELETE")await z0(Z,Q);else throw new Error;return new Response(O,{status:Y})};async function D0($){const z=(new TextEncoder()).encode($),W=await crypto.subtle.digest("SHA-256",z);return[...new Uint8Array(W)].map((J)=>J.toString(16).padStart(2,"0")).join("")}class Z0{static LOCAL_ENDPOINT="indexdb://";config;s3ClientLite;manifests=new E(B);memCache=new E(($)=>`${$.Bucket}${$.Key}${$.VersionId}${$.IfNoneMatch}`);diskCache;endpoint;constructor($){if(this.config={...$,label:$.label||"default",useChecksum:$.useChecksum===!1?!1:!0,online:$.online===!1?!1:!0,offlineStorage:$.offlineStorage===!1?!1:!0,useVersioning:$.useVersioning||!1,pollFrequency:$.pollFrequency||1000,defaultManifest:{bucket:$.defaultManifest?.bucket||$.defaultBucket,key:typeof $.defaultManifest=="string"?$.defaultManifest:$.defaultManifest?.key||"manifest.json"},log:(...W)=>($.log||console.log)(this.config.label,...W)},this.config.s3Config?.credentials instanceof Function)throw Error("We can't do that yet");this.endpoint=$.s3Config.endpoint||`https://s3.${$.s3Config.region}.amazonaws.com`;let z;if(this.config.s3Config?.credentials){const W=new v({accessKeyId:this.config.s3Config.credentials.accessKeyId,secretAccessKey:this.config.s3Config.credentials.secretAccessKey,sessionToken:this.config.s3Config.credentials.sessionToken,region:this.config.s3Config.region||"us-east-1",service:"s3",retries:0});z=(...J)=>W.fetch(...J)}else if(this.endpoint==Z0.LOCAL_ENDPOINT)z=X0;else z=(global||window).fetch.bind(global||window);if(this.config.offlineStorage){const W=`mps3-${this.config.label}`;this.diskCache=A(W,"v0")}this.s3ClientLite=new g(this.config.online?z:()=>new Promise(()=>{}),this.endpoint,$.parser||new DOMParser)}getOrCreateManifest($){if(!this.manifests.has($)){const z=new y(this,$);if(this.manifests.set($,z),this.config.offlineStorage){const W=`mps3-${this.config.label}-${$.bucket}-${$.key}`,J=A(W,"v0");this.config.log(`Restoring manifest from ${W}`),z.load(J)}}return this.manifests.get($)}async get($,z={}){const W={...this.config.defaultManifest,...z.manifest},J=this.getOrCreateManifest(W),X={bucket:$.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof $==="string"?$:$.key},D=await J.operationQueue.flatten();if(D.has(X))return this.config.log(`GET (cached) ${X} ${D.get(X)}`),D.get(X);const Z=await J.getOptimisticVersion(X);if(Z===void 0)return;return(await this._getObject({operation:"GET",ref:X,version:Z})).data}async _getObject($){let z;if(this.config.useVersioning)z={Bucket:$.ref.bucket,Key:$.ref.key,IfNoneMatch:$.ifNoneMatch,...$.version&&{VersionId:$.version}};else z={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,IfNoneMatch:$.ifNoneMatch};const W=`${z.Bucket}${z.Key}${z.VersionId}`;if($.useCache!==!1){if(this.memCache.has(z))return this.memCache.get(z);if(this.diskCache){const X=await L(W,this.diskCache);if(X)return this.config.log(`${$.operation} (disk cached) ${W}`),this.memCache.set(z,Promise.resolve(X)),X}}if(!this.config.online)throw new Error(`${this.config.label} Offline and value not cached for ${W}`);const J=G(this.s3ClientLite.getObject(z)).then(async([X,D])=>{const Z={$metadata:X.$metadata,ETag:X.ETag,data:X.Body};return this.config.log(`${D}ms ${$.operation} ${$.ref.bucket}/${$.ref.key}@${$.version} => ${Z.VersionId}`),Z}).catch((X)=>{if(X?.name==="304")return{$metadata:{httpStatusCode:304},data:void 0};else throw X});if($.useCache!==!1){if(this.memCache.set(z,J),this.diskCache)J.then((X)=>{C(`${z.Bucket}${z.Key}${z.VersionId}`,X,this.diskCache).then(()=>this.config.log(`STORE ${z.Bucket}${z.Key}`))})}return J}async delete($,z={}){return this.putAll(new Map([[$,void 0]]),z)}async put($,z,W={}){return this.putAll(new Map([[$,z]]),W)}async putAll($,z={}){const W=new Map([...$].map(([X,D])=>[{bucket:X.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof X==="string"?X:X.key},D])),J=(z?.manifests||[this.config.defaultManifest]).map((X)=>({...this.config.defaultManifest,...X}));return this._putAll(W,{manifests:J,await:z.await||this.config.online?"remote":"local"})}async _putAll($,z){const W=new Map,J=new Promise(async(X,D)=>{const Z=new Map,Q=[];$.forEach((O,Y)=>{if(O!==void 0){let U=this.config.useVersioning?void 0:_();W.set(Y,O),Q.push(this._putObject({operation:"PUT_CONTENT",ref:Y,value:O,version:U}).then((F)=>{if(this.config.useVersioning)if(F.VersionId===void 0)throw console.error(F),Error(`Bucket ${Y.bucket} is not version enabled!`);else U=F.VersionId;Z.set(Y,U)}))}else Q.push(this._deleteObject({ref:Y}).then((U)=>{Z.set(Y,void 0)}))}),await Promise.all(Q).catch(D),X(Z)});return Promise.all(z.manifests.map((X)=>{return this.getOrCreateManifest(X).updateContent(W,J,{await:z.await,isLoad:z.isLoad===!0})}))}async _putObject($){const z=JSON.stringify($.value,null,2);let W;if(this.config.useVersioning)W={Bucket:$.ref.bucket,Key:$.ref.key,ContentType:"application/json",Body:z,...this.config.useChecksum&&{ChecksumSHA256:await D0(z)}};else W={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,ContentType:"application/json",Body:z,...this.config.useChecksum&&{ChecksumSHA256:await D0(z)}};const[J,X]=await G(this.s3ClientLite.putObject(W));if(this.config.log(`${X}ms ${$.operation} ${W.Bucket}/${W.Key} => ${J.VersionId}`),this.diskCache){const D=`${W.Bucket}${W.Key}${$.version||J.VersionId}`;await C(D,{$metadata:{httpStatusCode:200},etag:J.ETag,data:JSON.parse(z)},this.diskCache).then(()=>this.config.log(`STORE ${D}`))}return J}async _deleteObject($){const z={Bucket:$.ref.bucket,Key:$.ref.key},[W,J]=await G(this.s3ClientLite.deleteObject(z));return this.config.log(`${J}ms ${$.operation||"DELETE"} ${$.ref.bucket}/${$.ref.key} => ${W.VersionId}`),W}subscribe($,z,W){const J={...this.config.defaultManifest,...W?.manifest},X={key:typeof $==="string"?$:$.key,bucket:$.bucket||this.config.defaultBucket||J.bucket},D=this.getOrCreateManifest(J),Z=D.subscribe(X,z);return this.get(X,{manifest:J}).then((Q)=>{this.config.log(`NOTIFY (initial) ${B(X)}`),queueMicrotask(()=>{z(Q,void 0),D.poll()})}).catch((Q)=>{z(void 0,Q)}),Z}refresh(){return Promise.all([...this.manifests.values()].map(($)=>$.poll()))}get subscriberCount(){return[...this.manifests.values()].reduce(($,z)=>$+z.subscriberCount,0)}}export{Z0 as MPS3};
