var z=($,W)=>()=>(W||$((W={exports:{}}).exports,W),W.exports);var T=z((Y0,g)=>{Y0.serialize=function($){return $&&typeof $.toJSON==="function"?$.toJSON():$}});var p=z((U0,l)=>{var d=T().serialize;l.exports=function $(W,X){if(X=d(X),X===null||typeof X!=="object"||Array.isArray(X))return X;if(W=d(W),W===null||typeof W!=="object"||Array.isArray(W))W={};var D=Object.keys(X);for(var F=0;F<D.length;F++){var J=D[F];if(J==="__proto__"||J==="constructor"||J==="prototype")return W;if(X[J]===null){if(W.hasOwnProperty(J))delete W[J]}else W[J]=$(W[J],X[J])}return W}});var o=z((P0,f)=>{f.exports=function $(W,X){if(W===X)return!0;if(W&&X&&typeof W=="object"&&typeof X=="object"){if(W.constructor!==X.constructor)return!1;var D,F,J;if(Array.isArray(W)){if(D=W.length,D!=X.length)return!1;for(F=D;F--!==0;)if(!$(W[F],X[F]))return!1;return!0}if(W.constructor===RegExp)return W.source===X.source&&W.flags===X.flags;if(W.valueOf!==Object.prototype.valueOf)return W.valueOf()===X.valueOf();if(W.toString!==Object.prototype.toString)return W.toString()===X.toString();if(J=Object.keys(W),D=J.length,D!==Object.keys(X).length)return!1;for(F=D;F--!==0;)if(!Object.prototype.hasOwnProperty.call(X,J[F]))return!1;for(F=D;F--!==0;){var Y=J[F];if(!$(W[Y],X[Y]))return!1}return!0}return W!==W&&X!==X}});var i=z((_0,c)=>{var G0=function($,W){if($.length!==W.length)return!1;for(var X=0;X<$.length;X++)if(!B0(W[X],$[X]))return!1;return!0},B0=o(),U=T().serialize;c.exports=function $(W,X){if(W=U(W),X=U(X),W===null||X===null||typeof W!=="object"||typeof X!=="object"||Array.isArray(W)!==Array.isArray(X))return X;if(Array.isArray(W)){if(!G0(W,X))return X;return}var D={},F=Object.keys(W),J=Object.keys(X),Y,Z,G={};for(Z=0;Z<J.length;Z++)if(Y=J[Z],F.indexOf(Y)===-1)G[Y]=!0,D[Y]=U(X[Y]);var Q={};for(Z=0;Z<F.length;Z++)if(Y=F[Z],J.indexOf(Y)===-1)Q[Y]=!0,D[Y]=null;else if(W[Y]!==null&&typeof W[Y]==="object"){var N=$(W[Y],X[Y]);if(N!==void 0)D[Y]=N}else if(W[Y]!==X[Y])D[Y]=U(X[Y]);return Object.keys(D).length>0?D:void 0}});var t=z((C0,n)=>{n.exports=function $(W,X){if(W===null||X===null||typeof W!=="object"||typeof X!=="object"||Array.isArray(W)!==Array.isArray(X))return X;var D=JSON.parse(JSON.stringify(W));return Object.keys(X).forEach(function(F){if(W[F]!==void 0)D[F]=$(W[F],X[F]);else D[F]=X[F]}),D}});async function j($,W){const X=await crypto.subtle.importKey("raw",typeof $==="string"?C.encode($):$,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]);return crypto.subtle.sign("HMAC",X,C.encode(W))}async function u($){return crypto.subtle.digest("SHA-256",typeof $==="string"?C.encode($):$)}var _=function($){return Array.prototype.map.call(new Uint8Array($),(W)=>("0"+W.toString(16)).slice(-2)).join("")},h=function($){return $.replace(/[!'()*]/g,(W)=>"%"+W.charCodeAt(0).toString(16).toUpperCase())},F0=function($,W){const{hostname:X,pathname:D}=$;if(X.endsWith(".r2.cloudflarestorage.com"))return["s3","auto"];if(X.endsWith(".backblazeb2.com")){const Z=X.match(/^(?:[^.]+\.)?s3\.([^.]+)\.backblazeb2\.com$/);return Z!=null?["s3",Z[1]]:["",""]}const F=X.replace("dualstack.","").match(/([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(?:\.cn)?$/);let[J,Y]=(F||["",""]).slice(1,3);if(Y==="us-gov")Y="us-gov-west-1";else if(Y==="s3"||Y==="s3-accelerate")Y="us-east-1",J="s3";else if(J==="iot")if(X.startsWith("iot."))J="execute-api";else if(X.startsWith("data.jobs.iot."))J="iot-jobs-data";else J=D==="/mqtt"?"iotdevicegateway":"iotdata";else if(J==="autoscaling"){const Z=(W.get("X-Amz-Target")||"").split(".")[0];if(Z==="AnyScaleFrontendService")J="application-autoscaling";else if(Z==="AnyScaleScalingPlannerFrontendService")J="autoscaling-plans"}else if(Y==null&&J.startsWith("s3-"))Y=J.slice(3).replace(/^fips-|^external-1/,""),J="s3";else if(J.endsWith("-fips"))J=J.slice(0,-5);else if(Y&&/-\d$/.test(J)&&!/-\d$/.test(Y))[J,Y]=[Y,J];return[X0[J]||J,Y]},C=new TextEncoder,X0={appstream2:"appstream",cloudhsmv2:"cloudhsm",email:"ses",marketplace:"aws-marketplace",mobile:"AWSMobileHubService",pinpoint:"mobiletargeting",queue:"sqs","git-codecommit":"codecommit","mturk-requester-sandbox":"mturk-requester","personalize-runtime":"personalize"},D0=new Set(["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id","range","connection"]);class E{constructor({accessKeyId:$,secretAccessKey:W,sessionToken:X,service:D,region:F,cache:J,retries:Y,initRetryMs:Z}){if($==null)throw new TypeError("accessKeyId is a required option");if(W==null)throw new TypeError("secretAccessKey is a required option");this.accessKeyId=$,this.secretAccessKey=W,this.sessionToken=X,this.service=D,this.region=F,this.cache=J||new Map,this.retries=Y!=null?Y:10,this.initRetryMs=Z||50}async sign($,W){if($ instanceof Request){const{method:F,url:J,headers:Y,body:Z}=$;if(W=Object.assign({method:F,url:J,headers:Y},W),W.body==null&&Y.has("Content-Type"))W.body=Z!=null&&Y.has("X-Amz-Content-Sha256")?Z:await $.clone().arrayBuffer();$=J}const X=new k(Object.assign({url:$},W,this,W&&W.aws)),D=Object.assign({},W,await X.sign());delete D.aws;try{return new Request(D.url.toString(),D)}catch(F){if(F instanceof TypeError)return new Request(D.url.toString(),Object.assign({duplex:"half"},D));throw F}}async fetch($,W){for(let X=0;X<=this.retries;X++){const D=fetch(await this.sign($,W));if(X===this.retries)return D;const F=await D;if(F.status<500&&F.status!==429)return F;await new Promise((J)=>setTimeout(J,Math.random()*this.initRetryMs*Math.pow(2,X)))}throw new Error("An unknown error occurred, ensure retries is not negative")}}class k{constructor({method:$,url:W,headers:X,body:D,accessKeyId:F,secretAccessKey:J,sessionToken:Y,service:Z,region:G,cache:Q,datetime:N,signQuery:r,appendSessionToken:e,allHeaders:$0,singleEncode:W0}){if(W==null)throw new TypeError("url is a required option");if(F==null)throw new TypeError("accessKeyId is a required option");if(J==null)throw new TypeError("secretAccessKey is a required option");this.method=$||(D?"POST":"GET"),this.url=new URL(W),this.headers=new Headers(X||{}),this.body=D,this.accessKeyId=F,this.secretAccessKey=J,this.sessionToken=Y;let K,I;if(!Z||!G)[K,I]=F0(this.url,this.headers);if(this.service=Z||K||"",this.region=G||I||"us-east-1",this.cache=Q||new Map,this.datetime=N||(new Date()).toISOString().replace(/[:-]|\.\d{3}/g,""),this.signQuery=r,this.appendSessionToken=e||this.service==="iotdevicegateway",this.headers.delete("Host"),this.service==="s3"&&!this.signQuery&&!this.headers.has("X-Amz-Content-Sha256"))this.headers.set("X-Amz-Content-Sha256","UNSIGNED-PAYLOAD");const V=this.signQuery?this.url.searchParams:this.headers;if(V.set("X-Amz-Date",this.datetime),this.sessionToken&&!this.appendSessionToken)V.set("X-Amz-Security-Token",this.sessionToken);if(this.signableHeaders=["host",...this.headers.keys()].filter((B)=>$0||!D0.has(B)).sort(),this.signedHeaders=this.signableHeaders.join(";"),this.canonicalHeaders=this.signableHeaders.map((B)=>B+":"+(B==="host"?this.url.host:(this.headers.get(B)||"").replace(/\s+/g," "))).join("\n"),this.credentialString=[this.datetime.slice(0,8),this.region,this.service,"aws4_request"].join("/"),this.signQuery){if(this.service==="s3"&&!V.has("X-Amz-Expires"))V.set("X-Amz-Expires","86400");V.set("X-Amz-Algorithm","AWS4-HMAC-SHA256"),V.set("X-Amz-Credential",this.accessKeyId+"/"+this.credentialString),V.set("X-Amz-SignedHeaders",this.signedHeaders)}if(this.service==="s3")try{this.encodedPath=decodeURIComponent(this.url.pathname.replace(/\+/g," "))}catch(B){this.encodedPath=this.url.pathname}else this.encodedPath=this.url.pathname.replace(/\/+/g,"/");if(!W0)this.encodedPath=encodeURIComponent(this.encodedPath).replace(/%2F/g,"/");this.encodedPath=h(this.encodedPath);const R=new Set;this.encodedSearch=[...this.url.searchParams].filter(([B])=>{if(!B)return!1;if(this.service==="s3"){if(R.has(B))return!1;R.add(B)}return!0}).map((B)=>B.map((L)=>h(encodeURIComponent(L)))).sort(([B,L],[v,b])=>B<v?-1:B>v?1:L<b?-1:L>b?1:0).map((B)=>B.join("=")).join("&")}async sign(){if(this.signQuery){if(this.url.searchParams.set("X-Amz-Signature",await this.signature()),this.sessionToken&&this.appendSessionToken)this.url.searchParams.set("X-Amz-Security-Token",this.sessionToken)}else this.headers.set("Authorization",await this.authHeader());return{method:this.method,url:this.url,headers:this.headers,body:this.body}}async authHeader(){return["AWS4-HMAC-SHA256 Credential="+this.accessKeyId+"/"+this.credentialString,"SignedHeaders="+this.signedHeaders,"Signature="+await this.signature()].join(", ")}async signature(){const $=this.datetime.slice(0,8),W=[this.secretAccessKey,$,this.region,this.service].join();let X=this.cache.get(W);if(!X){const D=await j("AWS4"+this.secretAccessKey,$),F=await j(D,this.region),J=await j(F,this.service);X=await j(J,"aws4_request"),this.cache.set(W,X)}return _(await j(X,await this.stringToSign()))}async stringToSign(){return["AWS4-HMAC-SHA256",this.datetime,this.credentialString,_(await u(await this.canonicalString()))].join("\n")}async canonicalString(){return[this.method.toUpperCase(),this.encodedPath,this.encodedSearch,this.canonicalHeaders+"\n",this.signedHeaders,await this.hexBodyHash()].join("\n")}async hexBodyHash(){let $=this.headers.get("X-Amz-Content-Sha256")||(this.service==="s3"&&this.signQuery?"UNSIGNED-PAYLOAD":null);if($==null){if(this.body&&typeof this.body!=="string"&&!("byteLength"in this.body))throw new Error("body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header");$=_(await u(this.body||""))}return $}}var m=($,W)=>{const X=W.parseFromString($,"text/xml"),D=X.querySelector("ListBucketResult"),F=X.querySelectorAll("Contents"),J=X.querySelector("CommonPrefixes");if(D===null||F===null)throw new Error("Invalid XML");return{$metadata:{},IsTruncated:D.querySelector("IsTruncated")?.textContent==="true",Contents:Array.from(F).map((Y)=>({ChecksumAlgorithm:[Y.querySelector("ChecksumAlgorithm")?.textContent],ETag:Y.querySelector("ETag")?.textContent,Key:Y.querySelector("Key")?.textContent,LastModified:new Date(Y.querySelector("LastModified")?.textContent),Owner:{DisplayName:Y.querySelector("DisplayName")?.textContent,ID:Y.querySelector("ID")?.textContent},Size:Number.parseInt(Y.querySelector("Size")?.textContent),StorageClass:Y.querySelector("StorageClass")?.textContent})),Name:X.querySelector("Name")?.textContent,Prefix:X.querySelector("Prefix")?.textContent,Delimiter:X.querySelector("Delimiter")?.textContent,MaxKeys:Number.parseInt(X.querySelector("MaxKeys")?.textContent),CommonPrefixes:Array.from(J?J.querySelectorAll("Prefix"):[],(Y)=>({Prefix:Y?.textContent})),EncodingType:X.querySelector("EncodingType")?.textContent,KeyCount:Number.parseInt(X.querySelector("KeyCount")?.textContent),ContinuationToken:X.querySelector("ContinuationToken")?.textContent,NextContinuationToken:X.querySelector("NextContinuationToken")?.textContent,StartAfter:X.querySelector("StartAfter")?.textContent}};class w{client;endpoint;parser;constructor($,W,X){this.client=$,this.endpoint=W,this.parser=X}async listObjectV2($){const W=`${this.endpoint}/${$.Bucket}?list-type=2&prefix=${$.Prefix}`,D=await(await this.client.fetch(W,{})).text();return m(D,this.parser)}async putObject($){const W=`${this.endpoint}/${$.Bucket}/${$.Key}`,X=await this.client.fetch(W,{method:"PUT",body:$.Body});if(X.status!=200)throw new Error("Failed to put object");return{$metadata:{httpStatusCode:X.status},ETag:X.headers.get("ETag"),...X.headers.get("x-amz-version-id")&&{VersionId:X.headers.get("x-amz-version-id")}}}async deleteObject($){const W=`${this.endpoint}/${$.Bucket}/${$.Key}`;return{$metadata:{httpStatusCode:(await this.client.fetch(W,{method:"DELETE"})).status}}}async getObject($){const W=`${this.endpoint}/${$.Bucket}/${$.Key}?${$.VersionId?`versionId=${$.VersionId}`:""}`,X=await this.client.fetch(W,{method:"GET",headers:{"If-None-Match":$.IfNoneMatch}});if(X.status==304){const F=new Error;throw F.name="304",F}const D=X.status==404?void 0:await X.json();return{$metadata:{httpStatusCode:X.status},Body:D,ETag:X.headers.get("ETag"),...X.headers.get("x-amz-version-id")&&{VersionId:X.headers.get("x-amz-version-id")}}}}class M{key;_vals;_keys;constructor($,W){if(this.key=$,this._vals=new Map,this._keys=new Map,W)for(let[X,D]of W)this.set(X,D)}get size(){return this._vals.size}set($,W){const X=this.key($);return this._vals.set(X,W),this._keys.set(X,$),this}get($){return this._vals.get(this.key($))}delete($){const W=this.key($);return this._keys.delete(W),this._vals.delete(W)}has($){return this._vals.has(this.key($))}values(){return this._vals.values()}keys(){return this._keys.values()}forEach($){return this._vals.forEach((W,X,D)=>$(W,this._keys.get(X)))}}var x=()=>`${Date.now()-200}`.padStart(14,"0"),y=()=>`${Date.now()+200}`.padStart(14,"0");var O=()=>crypto.randomUUID();var q=($)=>`${$.bucket}/${$.key}`;var P=p(),Q0=i(),q0=t();var H={previous:".",files:{},update:{}};class s{ref;handler;lastVersion;queue=Promise.resolve();constructor($,W){this.ref=$,this.handler=W}notify($,W,X){this.queue=this.queue.then(()=>X).then((D)=>{if(W===this.lastVersion)return;else console.log(`${$} NOTIFY ${q(this.ref)} ${W}`),this.lastVersion=W,this.handler(D)})}}class S{service;ref;subscribers=new Set;poller;cache;pollInProgress=!1;authoritative_key="";authoritative_state=H;optimistic_state=H;pendingWrites=new Map;writtenOperations=new Map;constructor($,W,X){this.service=$,this.ref=W}observeVersionId($){if(this.writtenOperations.has($)){const W=this.writtenOperations.get($);this.pendingWrites.delete(W),this.writtenOperations.delete($)}}async get(){return this.getLatest().then(($)=>$||this.cache?.data)}async getLatest(){try{const $=await this.service._getObject({operation:"POLL_TIME",ref:this.ref,ifNoneMatch:this.cache?.etag});if($.$metadata.httpStatusCode===304)return;if($.data===void 0)this.authoritative_key=".";else this.authoritative_key=$.data;const W=await this.service.s3ClientLite.listObjectV2({Bucket:this.ref.bucket,Prefix:this.ref.key,StartAfter:this.authoritative_key});if(W.Contents===void 0)return this.authoritative_state=H,this.optimistic_state=H,this.authoritative_state;for(let X=W.Contents.length-1;X>=0;X--){const D=W.Contents[X].Key;if(D==this.ref.key)continue;const F=x(),J=await this.service._getObject({operation:"LOOK_BACK",ref:{bucket:this.ref.bucket,key:D}});if(J.data===void 0)throw new Error("empty data");if(J.data.previous<F){this.authoritative_key=J.data.previous,this.authoritative_state=J.data;break}}for(let X=0;X<W.Contents.length;X++){const D=W.Contents[X].Key;if(D==this.ref.key)continue;const F=await this.service._getObject({operation:"SWEEP",ref:{bucket:this.ref.bucket,key:D}}),J=D.substring(D.lastIndexOf("@")+1),Y=x();if(D<this.authoritative_key);else if(J>=Y)this.optimistic_state=P(this.optimistic_state,F.data?.update);else this.authoritative_state=P(this.authoritative_state,F.data?.update),this.authoritative_key=D;this.observeVersionId(J)}return this.authoritative_state}catch($){if($.name==="NoSuchKey")return this.authoritative_state=H,this.authoritative_state;else throw $}}async poll(){if(this.pollInProgress)return;if(this.pollInProgress=!0,this.subscriberCount===0&&this.poller)clearInterval(this.poller),this.poller=void 0;if(this.subscriberCount>0&&!this.poller)this.poller=setInterval(()=>this.poll(),this.service.config.pollFrequency);const $=await this.getLatest();if($===void 0){this.pollInProgress=!1;return}this.subscribers.forEach(async(W)=>{const X=$.files[q(W.ref)];if(X){const D=this.service._getObject({operation:"GET_CONTENT",ref:W.ref,version:X.version});W.notify(this.service.config.label,X.version,D.then((F)=>F.data))}else if(X===null)W.notify(this.service.config.label,void 0,Promise.resolve(void 0))}),this.pollInProgress=!1}async updateContent($,W){this.pendingWrites.set(W,$);try{const X=await W,D=await this.get();D.previous=this.authoritative_key,D.update={files:{}};for(let[Z,G]of X){const Q=q(Z);if(G){const N={version:G};D.update.files[Q]=N}else D.update.files[Q]=null}const F=y()+"_"+O().substring(0,2),J=this.ref.key+"@"+F;await this.service._putObject({operation:"PUT_MANIFEST",ref:{key:J,bucket:this.ref.bucket},value:D});const Y=await this.service._putObject({operation:"PUT_POLL",ref:{key:this.ref.key,bucket:this.ref.bucket},value:this.authoritative_key});return this.writtenOperations.set(F,W),this.poll(),Y}catch(X){throw console.error(X),this.pendingWrites.delete(W),X}}async getOptimisticVersion($){return await this.get(),this.optimistic_state.files[q($)]?.version}subscribe($,W){console.log(`SUBSCRIBE ${q($)} ${this.subscriberCount+1}`);const X=new s($,W);return this.subscribers.add(X),()=>this.subscribers.delete(X)}get subscriberCount(){return this.subscribers.size}}async function a($){const W=(new TextEncoder()).encode($),X=await crypto.subtle.digest("SHA-256",W);return btoa(String.fromCharCode(...new Uint8Array(X)))}class N0{config;s3ClientLite;manifests=new M(q);getCache=new M(($)=>`${$.Bucket}${$.Key}${$.VersionId}${$.IfNoneMatch}`);constructor($){if(this.config={...$,label:$.label||O().substring(0,3),useChecksum:$.useChecksum===!1?!1:!0,useVersioning:$.useVersioning||!1,pollFrequency:$.pollFrequency||1000,defaultManifest:{bucket:$.defaultManifest?.bucket||$.defaultBucket,key:$.defaultManifest?.key||"manifest.json"}},this.config.s3Config?.credentials instanceof Function)throw Error("We can't do that yet");const W=$.s3Config.endpoint||`https://s3.${$.s3Config.region}.amazonaws.com`;this.s3ClientLite=new w(new E({accessKeyId:this.config.s3Config?.credentials?.accessKeyId,secretAccessKey:this.config.s3Config?.credentials?.secretAccessKey,sessionToken:this.config.s3Config?.credentials?.sessionToken,service:"s3",retries:0}),W,$.parser||new DOMParser)}getOrCreateManifest($){if(!this.manifests.has($))this.manifests.set($,new S(this,$));return this.manifests.get($)}async get($,W={}){const X={...this.config.defaultManifest,...W.manifest},D=this.getOrCreateManifest(X),F={bucket:$.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof $==="string"?$:$.key};let J=!1,Y=void 0;for(let[G,Q]of D.pendingWrites)if(Q.has(F))J=!0,Y=Q.get(F);if(J)return console.log(`${this.config.label} get (cached) ${q(F)}`),Y;const Z=await D.getOptimisticVersion(F);if(Z===void 0)return;return(await this._getObject({operation:"GET",ref:F,version:Z})).data}async _getObject($){let W;if(this.config.useVersioning)W={Bucket:$.ref.bucket,Key:$.ref.key,IfNoneMatch:$.ifNoneMatch,...$.version&&{VersionId:$.version}};else W={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,IfNoneMatch:$.ifNoneMatch};if(this.getCache.has(W))return await this.getCache.get(W);const X=this.s3ClientLite.getObject(W).then(async(D)=>{const F={...D,data:D.Body};return console.log(`${this.config.label} ${$.operation} ${$.ref.bucket}/${$.ref.key}@${$.version} => ${F.VersionId} ${F.data}}`),this.getCache.set(W,X),F}).catch((D)=>{if(D?.name==="304")return{$metadata:{httpStatusCode:304},data:void 0};else throw D});return X}async delete($,W={}){return this.putAll(new Map([[$,void 0]]),W)}async put($,W,X={}){return this.putAll(new Map([[$,W]]),X)}async putAll($,W={}){const X=new M(q,[...$].map(([F,J])=>[{bucket:F.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof F==="string"?F:F.key},J])),D=(W?.manifests||[this.config.defaultManifest]).map((F)=>({...this.config.defaultManifest,...F}));return this._putAll(X,{manifests:D})}async _putAll($,W){const X=new Promise(async(D,F)=>{const J=new Map,Y=[];$.forEach((Z,G)=>{if(Z!==void 0){let Q=this.config.useVersioning?void 0:O();Y.push(this._putObject({operation:"PUT_CONTENT",ref:G,value:Z,version:Q}).then((N)=>{if(this.config.useVersioning)if(N.VersionId===void 0)throw console.error(N),Error(`Bucket ${G.bucket} is not version enabled!`);else Q=N.VersionId;J.set(G,Q)}))}else Y.push(this._deleteObject({ref:G}).then((Q)=>{J.set(G,void 0)}))}),await Promise.all(Y).catch(F),D(J)});return Promise.all(W.manifests.map((D)=>{return this.getOrCreateManifest(D).updateContent($,X)}))}async _putObject($){const W=JSON.stringify($.value,null,2);let X;if(this.config.useVersioning)X={Bucket:$.ref.bucket,Key:$.ref.key,ContentType:"application/json",Body:W,...this.config.useChecksum&&{ChecksumSHA256:await a(W)}};else X={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,ContentType:"application/json",Body:W,...this.config.useChecksum&&{ChecksumSHA256:await a(W)}};const D=await this.s3ClientLite.putObject(X);return console.log(`${this.config.label} ${$.operation} ${X.Bucket}/${X.Key} => ${D.VersionId}`),D}async _deleteObject($){const W={Bucket:$.ref.bucket,Key:$.ref.key},X=await this.s3ClientLite.deleteObject(W);return console.log(`${this.config.label} DELETE ${$.ref.bucket}/${$.ref.key} => ${X.VersionId}`),X}subscribe($,W,X){const D={...this.config.defaultManifest,...X?.manifest},F={key:typeof $==="string"?$:$.key,bucket:$.bucket||this.config.defaultBucket||D.bucket},J=this.getOrCreateManifest(D),Y=J.subscribe(F,W);return this.get(F,{manifest:D}).then((Z)=>{console.log(`${this.config.label} NOTIFY (initial) ${q(F)}`),queueMicrotask(()=>{W(Z),J.poll()})}),Y}refresh(){return Promise.all([...this.manifests.values()].map(($)=>$.poll()))}get subscriberCount(){return[...this.manifests.values()].reduce(($,W)=>$+W.subscriberCount,0)}}export{N0 as MPS3};
