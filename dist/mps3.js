var N=($,W)=>()=>(W||$((W={exports:{}}).exports,W),W.exports);var A=N((J0,g)=>{J0.serialize=function($){return $&&typeof $.toJSON==="function"?$.toJSON():$}});var p=N((C0,l)=>{var d=A().serialize;l.exports=function $(W,D){if(D=d(D),D===null||typeof D!=="object"||Array.isArray(D))return D;if(W=d(W),W===null||typeof W!=="object"||Array.isArray(W))W={};var F=Object.keys(D);for(var X=0;X<F.length;X++){var Y=F[X];if(Y==="__proto__"||Y==="constructor"||Y==="prototype")return W;if(D[Y]===null){if(W.hasOwnProperty(Y))delete W[Y]}else W[Y]=$(W[Y],D[Y])}return W}});var o=N((U0,f)=>{f.exports=function $(W,D){if(W===D)return!0;if(W&&D&&typeof W=="object"&&typeof D=="object"){if(W.constructor!==D.constructor)return!1;var F,X,Y;if(Array.isArray(W)){if(F=W.length,F!=D.length)return!1;for(X=F;X--!==0;)if(!$(W[X],D[X]))return!1;return!0}if(W.constructor===RegExp)return W.source===D.source&&W.flags===D.flags;if(W.valueOf!==Object.prototype.valueOf)return W.valueOf()===D.valueOf();if(W.toString!==Object.prototype.toString)return W.toString()===D.toString();if(Y=Object.keys(W),F=Y.length,F!==Object.keys(D).length)return!1;for(X=F;X--!==0;)if(!Object.prototype.hasOwnProperty.call(D,Y[X]))return!1;for(X=F;X--!==0;){var J=Y[X];if(!$(W[J],D[J]))return!1}return!0}return W!==W&&D!==D}});var i=N((V0,c)=>{var G0=function($,W){if($.length!==W.length)return!1;for(var D=0;D<$.length;D++)if(!B0(W[D],$[D]))return!1;return!0},B0=o(),C=A().serialize;c.exports=function $(W,D){if(W=C(W),D=C(D),W===null||D===null||typeof W!=="object"||typeof D!=="object"||Array.isArray(W)!==Array.isArray(D))return D;if(Array.isArray(W)){if(!G0(W,D))return D;return}var F={},X=Object.keys(W),Y=Object.keys(D),J,Z,G={};for(Z=0;Z<Y.length;Z++)if(J=Y[Z],X.indexOf(J)===-1)G[J]=!0,F[J]=C(D[J]);var Q={};for(Z=0;Z<X.length;Z++)if(J=X[Z],Y.indexOf(J)===-1)Q[J]=!0,F[J]=null;else if(W[J]!==null&&typeof W[J]==="object"){var q=$(W[J],D[J]);if(q!==void 0)F[J]=q}else if(W[J]!==D[J])F[J]=C(D[J]);return Object.keys(F).length>0?F:void 0}});var s=N((L0,n)=>{n.exports=function $(W,D){if(W===null||D===null||typeof W!=="object"||typeof D!=="object"||Array.isArray(W)!==Array.isArray(D))return D;var F=JSON.parse(JSON.stringify(W));return Object.keys(D).forEach(function(X){if(W[X]!==void 0)F[X]=$(W[X],D[X]);else F[X]=D[X]}),F}});async function H($,W){const D=await crypto.subtle.importKey("raw",typeof $==="string"?L.encode($):$,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]);return crypto.subtle.sign("HMAC",D,L.encode(W))}async function u($){return crypto.subtle.digest("SHA-256",typeof $==="string"?L.encode($):$)}var V=function($){return Array.prototype.map.call(new Uint8Array($),(W)=>("0"+W.toString(16)).slice(-2)).join("")},h=function($){return $.replace(/[!'()*]/g,(W)=>"%"+W.charCodeAt(0).toString(16).toUpperCase())},X0=function($,W){const{hostname:D,pathname:F}=$;if(D.endsWith(".r2.cloudflarestorage.com"))return["s3","auto"];if(D.endsWith(".backblazeb2.com")){const Z=D.match(/^(?:[^.]+\.)?s3\.([^.]+)\.backblazeb2\.com$/);return Z!=null?["s3",Z[1]]:["",""]}const X=D.replace("dualstack.","").match(/([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(?:\.cn)?$/);let[Y,J]=(X||["",""]).slice(1,3);if(J==="us-gov")J="us-gov-west-1";else if(J==="s3"||J==="s3-accelerate")J="us-east-1",Y="s3";else if(Y==="iot")if(D.startsWith("iot."))Y="execute-api";else if(D.startsWith("data.jobs.iot."))Y="iot-jobs-data";else Y=F==="/mqtt"?"iotdevicegateway":"iotdata";else if(Y==="autoscaling"){const Z=(W.get("X-Amz-Target")||"").split(".")[0];if(Z==="AnyScaleFrontendService")Y="application-autoscaling";else if(Z==="AnyScaleScalingPlannerFrontendService")Y="autoscaling-plans"}else if(J==null&&Y.startsWith("s3-"))J=Y.slice(3).replace(/^fips-|^external-1/,""),Y="s3";else if(Y.endsWith("-fips"))Y=Y.slice(0,-5);else if(J&&/-\d$/.test(Y)&&!/-\d$/.test(J))[Y,J]=[J,Y];return[D0[Y]||Y,J]},L=new TextEncoder,D0={appstream2:"appstream",cloudhsmv2:"cloudhsm",email:"ses",marketplace:"aws-marketplace",mobile:"AWSMobileHubService",pinpoint:"mobiletargeting",queue:"sqs","git-codecommit":"codecommit","mturk-requester-sandbox":"mturk-requester","personalize-runtime":"personalize"},F0=new Set(["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id","range","connection"]);class E{constructor({accessKeyId:$,secretAccessKey:W,sessionToken:D,service:F,region:X,cache:Y,retries:J,initRetryMs:Z}){if($==null)throw new TypeError("accessKeyId is a required option");if(W==null)throw new TypeError("secretAccessKey is a required option");this.accessKeyId=$,this.secretAccessKey=W,this.sessionToken=D,this.service=F,this.region=X,this.cache=Y||new Map,this.retries=J!=null?J:10,this.initRetryMs=Z||50}async sign($,W){if($ instanceof Request){const{method:X,url:Y,headers:J,body:Z}=$;if(W=Object.assign({method:X,url:Y,headers:J},W),W.body==null&&J.has("Content-Type"))W.body=Z!=null&&J.has("X-Amz-Content-Sha256")?Z:await $.clone().arrayBuffer();$=Y}const D=new k(Object.assign({url:$},W,this,W&&W.aws)),F=Object.assign({},W,await D.sign());delete F.aws;try{return new Request(F.url.toString(),F)}catch(X){if(X instanceof TypeError)return new Request(F.url.toString(),Object.assign({duplex:"half"},F));throw X}}async fetch($,W){for(let D=0;D<=this.retries;D++){const F=fetch(await this.sign($,W));if(D===this.retries)return F;const X=await F;if(X.status<500&&X.status!==429)return X;await new Promise((Y)=>setTimeout(Y,Math.random()*this.initRetryMs*Math.pow(2,D)))}throw new Error("An unknown error occurred, ensure retries is not negative")}}class k{constructor({method:$,url:W,headers:D,body:F,accessKeyId:X,secretAccessKey:Y,sessionToken:J,service:Z,region:G,cache:Q,datetime:q,signQuery:r,appendSessionToken:e,allHeaders:$0,singleEncode:W0}){if(W==null)throw new TypeError("url is a required option");if(X==null)throw new TypeError("accessKeyId is a required option");if(Y==null)throw new TypeError("secretAccessKey is a required option");this.method=$||(F?"POST":"GET"),this.url=new URL(W),this.headers=new Headers(D||{}),this.body=F,this.accessKeyId=X,this.secretAccessKey=Y,this.sessionToken=J;let I,K;if(!Z||!G)[I,K]=X0(this.url,this.headers);if(this.service=Z||I||"",this.region=G||K||"us-east-1",this.cache=Q||new Map,this.datetime=q||(new Date()).toISOString().replace(/[:-]|\.\d{3}/g,""),this.signQuery=r,this.appendSessionToken=e||this.service==="iotdevicegateway",this.headers.delete("Host"),this.service==="s3"&&!this.signQuery&&!this.headers.has("X-Amz-Content-Sha256"))this.headers.set("X-Amz-Content-Sha256","UNSIGNED-PAYLOAD");const z=this.signQuery?this.url.searchParams:this.headers;if(z.set("X-Amz-Date",this.datetime),this.sessionToken&&!this.appendSessionToken)z.set("X-Amz-Security-Token",this.sessionToken);if(this.signableHeaders=["host",...this.headers.keys()].filter((B)=>$0||!F0.has(B)).sort(),this.signedHeaders=this.signableHeaders.join(";"),this.canonicalHeaders=this.signableHeaders.map((B)=>B+":"+(B==="host"?this.url.host:(this.headers.get(B)||"").replace(/\s+/g," "))).join("\n"),this.credentialString=[this.datetime.slice(0,8),this.region,this.service,"aws4_request"].join("/"),this.signQuery){if(this.service==="s3"&&!z.has("X-Amz-Expires"))z.set("X-Amz-Expires","86400");z.set("X-Amz-Algorithm","AWS4-HMAC-SHA256"),z.set("X-Amz-Credential",this.accessKeyId+"/"+this.credentialString),z.set("X-Amz-SignedHeaders",this.signedHeaders)}if(this.service==="s3")try{this.encodedPath=decodeURIComponent(this.url.pathname.replace(/\+/g," "))}catch(B){this.encodedPath=this.url.pathname}else this.encodedPath=this.url.pathname.replace(/\/+/g,"/");if(!W0)this.encodedPath=encodeURIComponent(this.encodedPath).replace(/%2F/g,"/");this.encodedPath=h(this.encodedPath);const R=new Set;this.encodedSearch=[...this.url.searchParams].filter(([B])=>{if(!B)return!1;if(this.service==="s3"){if(R.has(B))return!1;R.add(B)}return!0}).map((B)=>B.map((_)=>h(encodeURIComponent(_)))).sort(([B,_],[v,b])=>B<v?-1:B>v?1:_<b?-1:_>b?1:0).map((B)=>B.join("=")).join("&")}async sign(){if(this.signQuery){if(this.url.searchParams.set("X-Amz-Signature",await this.signature()),this.sessionToken&&this.appendSessionToken)this.url.searchParams.set("X-Amz-Security-Token",this.sessionToken)}else this.headers.set("Authorization",await this.authHeader());return{method:this.method,url:this.url,headers:this.headers,body:this.body}}async authHeader(){return["AWS4-HMAC-SHA256 Credential="+this.accessKeyId+"/"+this.credentialString,"SignedHeaders="+this.signedHeaders,"Signature="+await this.signature()].join(", ")}async signature(){const $=this.datetime.slice(0,8),W=[this.secretAccessKey,$,this.region,this.service].join();let D=this.cache.get(W);if(!D){const F=await H("AWS4"+this.secretAccessKey,$),X=await H(F,this.region),Y=await H(X,this.service);D=await H(Y,"aws4_request"),this.cache.set(W,D)}return V(await H(D,await this.stringToSign()))}async stringToSign(){return["AWS4-HMAC-SHA256",this.datetime,this.credentialString,V(await u(await this.canonicalString()))].join("\n")}async canonicalString(){return[this.method.toUpperCase(),this.encodedPath,this.encodedSearch,this.canonicalHeaders+"\n",this.signedHeaders,await this.hexBodyHash()].join("\n")}async hexBodyHash(){let $=this.headers.get("X-Amz-Content-Sha256")||(this.service==="s3"&&this.signQuery?"UNSIGNED-PAYLOAD":null);if($==null){if(this.body&&typeof this.body!=="string"&&!("byteLength"in this.body))throw new Error("body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header");$=V(await u(this.body||""))}return $}}var m=($,W)=>{const D=W.parseFromString($,"text/xml"),F=D.querySelector("ListBucketResult"),X=D.querySelectorAll("Contents"),Y=D.querySelector("CommonPrefixes");if(F===null||X===null)throw new Error("Invalid XML");return{$metadata:{},IsTruncated:F.querySelector("IsTruncated")?.textContent==="true",Contents:Array.from(X).map((J)=>({ChecksumAlgorithm:[J.querySelector("ChecksumAlgorithm")?.textContent],ETag:J.querySelector("ETag")?.textContent,Key:J.querySelector("Key")?.textContent,LastModified:new Date(J.querySelector("LastModified")?.textContent),Owner:{DisplayName:J.querySelector("DisplayName")?.textContent,ID:J.querySelector("ID")?.textContent},RestoreStatus:{IsRestoreInProgress:J.querySelector("IsRestoreInProgress")?.textContent==="true",RestoreExpiryDate:new Date(J.querySelector("RestoreExpiryDate")?.textContent)},Size:Number.parseInt(J.querySelector("Size")?.textContent),StorageClass:J.querySelector("StorageClass")?.textContent})),Name:D.querySelector("Name")?.textContent,Prefix:D.querySelector("Prefix")?.textContent,Delimiter:D.querySelector("Delimiter")?.textContent,MaxKeys:Number.parseInt(D.querySelector("MaxKeys")?.textContent),CommonPrefixes:Array.from(Y?Y.querySelectorAll("Prefix"):[],(J)=>({Prefix:J?.textContent})),EncodingType:D.querySelector("EncodingType")?.textContent,KeyCount:Number.parseInt(D.querySelector("KeyCount")?.textContent),ContinuationToken:D.querySelector("ContinuationToken")?.textContent,NextContinuationToken:D.querySelector("NextContinuationToken")?.textContent,StartAfter:D.querySelector("StartAfter")?.textContent}};class x{client;endpoint;parser;constructor($,W,D){this.client=$,this.endpoint=W,this.parser=D}async listObjectV2($){const W=`${this.endpoint}/${$.Bucket}?list-type=2&prefix=${$.Prefix}`,F=await(await this.client.fetch(W,{})).text();return m(F,this.parser)}async putObject($){const W=`${this.endpoint}/${$.Bucket}/${$.Key}`,D=await this.client.fetch(W,{method:"PUT",body:$.Body});if(D.status!=200)throw new Error("Failed to put object");return{$metadata:{httpStatusCode:D.status},ETag:D.headers.get("ETag"),...D.headers.get("x-amz-version-id")&&{VersionId:D.headers.get("x-amz-version-id")}}}async deleteObject($){const W=`${this.endpoint}/${$.Bucket}/${$.Key}`;return{$metadata:{httpStatusCode:(await this.client.fetch(W,{method:"DELETE"})).status}}}async getObject($){const W=`${this.endpoint}/${$.Bucket}/${$.Key}?${$.VersionId?`versionId=${$.VersionId}`:""}`,D=await this.client.fetch(W,{method:"GET",headers:{"If-None-Match":$.IfNoneMatch}});if(D.status==304){const X=new Error;throw X.name="304",X}const F=D.status==404?void 0:await D.json();return{$metadata:{httpStatusCode:D.status},Body:F,ETag:D.headers.get("ETag"),...D.headers.get("x-amz-version-id")&&{VersionId:D.headers.get("x-amz-version-id")}}}}class P{key;_vals;_keys;constructor($,W){if(this.key=$,this._vals=new Map,this._keys=new Map,W)for(let[D,F]of W)this.set(D,F)}get size(){return this._vals.size}set($,W){const D=this.key($);return this._vals.set(D,W),this._keys.set(D,$),this}get($){return this._vals.get(this.key($))}delete($){const W=this.key($);return this._keys.delete(W),this._vals.delete(W)}has($){return this._vals.has(this.key($))}values(){return this._vals.values()}keys(){return this._keys.values()}forEach($){return this._vals.forEach((W,D,F)=>$(W,this._keys.get(D)))}}var w=()=>`${Date.now()-200}`.padStart(14,"0"),y=()=>`${Date.now()+200}`.padStart(14,"0");var M=()=>crypto.randomUUID();var j=($)=>`${$.bucket}/${$.key}`;var U=p(),Q0=i(),j0=s();var O={previous:".",files:{},update:{}};class t{ref;handler;lastVersion;queue=Promise.resolve();constructor($,W){this.ref=$,this.handler=W}notify($,W,D){this.queue=this.queue.then(()=>D).then((F)=>{if(W===this.lastVersion)return;else console.log(`${$} NOTIFY ${j(this.ref)} ${W}`),this.lastVersion=W,this.handler(F)})}}class S{service;ref;subscribers=new Set;poller;cache;pollInProgress=!1;authoritative_key="";authoritative_state=O;optimistic_state=O;pendingWrites=new Map;writtenOperations=new Map;constructor($,W,D){this.service=$,this.ref=W}observeVersionId($){if(this.writtenOperations.has($)){const W=this.writtenOperations.get($);this.pendingWrites.delete(W),this.writtenOperations.delete($)}}async get(){return this.getLatest().then(($)=>$||this.cache?.data)}async getLatest(){try{const $=await this.service._getObject({operation:"POLL_TIME",ref:this.ref,ifNoneMatch:this.cache?.etag});if($.$metadata.httpStatusCode===304)return;if($.data===void 0)this.authoritative_key=".";else this.authoritative_key=$.data;const W=await this.service.s3ClientLite.listObjectV2({Bucket:this.ref.bucket,Prefix:this.ref.key,StartAfter:this.authoritative_key});if(W.Contents===void 0)return this.authoritative_state=O,this.optimistic_state=O,this.authoritative_state;for(let D=W.Contents.length-1;D>=0;D--){const F=W.Contents[D].Key;if(F==this.ref.key)continue;const X=w(),Y=await this.service._getObject({operation:"LOOK_BACK",ref:{bucket:this.ref.bucket,key:F}});if(Y.data===void 0)throw new Error("empty data");if(Y.data.previous<X){this.authoritative_key=Y.data.previous,this.authoritative_state=Y.data;break}}for(let D=0;D<W.Contents.length;D++){const F=W.Contents[D].Key;if(F==this.ref.key)continue;const X=await this.service._getObject({operation:"SWEEP",ref:{bucket:this.ref.bucket,key:F}}),Y=F.substring(F.lastIndexOf("@")+1),J=w();if(F<this.authoritative_key);else if(Y>=J)this.optimistic_state=U(this.optimistic_state,X.data?.update);else this.authoritative_state=U(this.authoritative_state,X.data?.update),this.authoritative_key=F;this.observeVersionId(Y)}return this.authoritative_state}catch($){if($.name==="NoSuchKey")return this.authoritative_state=O,this.authoritative_state;else throw $}}async poll(){if(this.pollInProgress)return;if(this.pollInProgress=!0,this.subscriberCount===0&&this.poller)clearInterval(this.poller),this.poller=void 0;if(this.subscriberCount>0&&!this.poller)this.poller=setInterval(()=>this.poll(),this.service.config.pollFrequency);const $=await this.getLatest();if($===void 0){this.pollInProgress=!1;return}this.subscribers.forEach(async(W)=>{const D=$.files[j(W.ref)];if(D){const F=this.service._getObject({operation:"GET_CONTENT",ref:W.ref,version:D.version});W.notify(this.service.config.label,D.version,F.then((X)=>X.data))}else if(D===null)W.notify(this.service.config.label,void 0,Promise.resolve(void 0))}),this.pollInProgress=!1}async updateContent($,W){this.pendingWrites.set(W,$);try{const D=await W,F=await this.get();F.previous=this.authoritative_key,F.update={files:{}};for(let[Z,G]of D){const Q=j(Z);if(G){const q={version:G};F.update.files[Q]=q}else F.update.files[Q]=null}const X=y()+"_"+M().substring(0,2),Y=this.ref.key+"@"+X;await this.service._putObject({operation:"PUT_MANIFEST",ref:{key:Y,bucket:this.ref.bucket},value:F});const J=await this.service._putObject({operation:"PUT_POLL",ref:{key:this.ref.key,bucket:this.ref.bucket},value:this.authoritative_key});return this.writtenOperations.set(X,W),this.poll(),J}catch(D){throw console.error(D),this.pendingWrites.delete(W),D}}async getOptimisticVersion($){return await this.get(),this.optimistic_state.files[j($)]?.version}subscribe($,W){console.log(`SUBSCRIBE ${j($)} ${this.subscriberCount+1}`);const D=new t($,W);return this.subscribers.add(D),()=>this.subscribers.delete(D)}get subscriberCount(){return this.subscribers.size}}async function a($){const W=(new TextEncoder()).encode($),D=await crypto.subtle.digest("SHA-256",W);return btoa(String.fromCharCode(...new Uint8Array(D)))}class q0{config;s3ClientLite;manifests=new P(j);constructor($){if(this.config={...$,label:$.label||M().substring(0,3),useChecksum:$.useChecksum===!1?!1:!0,useVersioning:$.useVersioning||!1,pollFrequency:$.pollFrequency||1000,defaultManifest:{bucket:$.defaultManifest?.bucket||$.defaultBucket,key:$.defaultManifest?.key||"manifest.json"}},this.config.s3Config?.credentials instanceof Function)throw Error("We can't do that yet");const W=$.s3Config.endpoint||`https://s3.${$.s3Config.region}.amazonaws.com`;this.s3ClientLite=new x(new E({accessKeyId:this.config.s3Config?.credentials?.accessKeyId,secretAccessKey:this.config.s3Config?.credentials?.secretAccessKey,sessionToken:this.config.s3Config?.credentials?.sessionToken,service:"s3",retries:0}),W,$.parser||new DOMParser)}getOrCreateManifest($){if(!this.manifests.has($))this.manifests.set($,new S(this,$));return this.manifests.get($)}async get($,W={}){const D={...this.config.defaultManifest,...W.manifest},F=this.getOrCreateManifest(D),X={bucket:$.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof $==="string"?$:$.key};let Y=!1,J=void 0;for(let[G,Q]of F.pendingWrites)if(Q.has(X))Y=!0,J=Q.get(X);if(Y)return console.log(`${this.config.label} get (cached) ${j(X)}`),J;const Z=await F.getOptimisticVersion(X);if(Z===void 0)return;return(await this._getObject({operation:"GET",ref:X,version:Z})).data}getCache=new P(($)=>`${$.Bucket}${$.Key}${$.VersionId}${$.IfNoneMatch}`);async _getObject($){let W;if(this.config.useVersioning)W={Bucket:$.ref.bucket,Key:$.ref.key,IfNoneMatch:$.ifNoneMatch,...$.version&&{VersionId:$.version}};else W={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,IfNoneMatch:$.ifNoneMatch};if(this.getCache.has(W))return await this.getCache.get(W);const D=this.s3ClientLite.getObject(W).then(async(F)=>{const X={...F,data:F.Body};return console.log(`${this.config.label} ${$.operation} ${$.ref.bucket}/${$.ref.key}@${$.version} => ${X.VersionId} ${X.data}}`),this.getCache.set(W,D),X}).catch((F)=>{if(F?.name==="304")return{$metadata:{httpStatusCode:304},data:void 0};else throw F});return D}async delete($,W={}){return this.putAll(new Map([[$,void 0]]),W)}async put($,W,D={}){return this.putAll(new Map([[$,W]]),D)}async putAll($,W={}){const D=new P(j,[...$].map(([X,Y])=>[{bucket:X.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof X==="string"?X:X.key},Y])),F=(W?.manifests||[this.config.defaultManifest]).map((X)=>({...this.config.defaultManifest,...X}));return this._putAll(D,{manifests:F})}async _putAll($,W){const D=new Promise(async(F,X)=>{const Y=new Map,J=[];$.forEach((Z,G)=>{if(Z!==void 0){let Q=this.config.useVersioning?void 0:M();J.push(this._putObject({operation:"PUT_CONTENT",ref:G,value:Z,version:Q}).then((q)=>{if(this.config.useVersioning)if(q.VersionId===void 0)throw console.error(q),Error(`Bucket ${G.bucket} is not version enabled!`);else Q=q.VersionId;Y.set(G,Q)}))}else J.push(this._deleteObject({ref:G}).then((Q)=>{Y.set(G,void 0)}))}),await Promise.all(J).catch(X),F(Y)});return Promise.all(W.manifests.map((F)=>{return this.getOrCreateManifest(F).updateContent($,D)}))}async _putObject($){const W=JSON.stringify($.value,null,2);let D;if(this.config.useVersioning)D={Bucket:$.ref.bucket,Key:$.ref.key,ContentType:"application/json",Body:W,...this.config.useChecksum&&{ChecksumSHA256:await a(W)}};else D={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,ContentType:"application/json",Body:W,...this.config.useChecksum&&{ChecksumSHA256:await a(W)}};const F=await this.s3ClientLite.putObject(D);return console.log(`${this.config.label} ${$.operation} ${D.Bucket}/${D.Key} => ${F.VersionId}`),F}async _deleteObject($){const W={Bucket:$.ref.bucket,Key:$.ref.key},D=await this.s3ClientLite.deleteObject(W);return console.log(`${this.config.label} DELETE ${$.ref.bucket}/${$.ref.key} => ${D.VersionId}`),D}subscribe($,W,D){const F={...this.config.defaultManifest,...D?.manifest},X={key:$,bucket:D?.bucket||this.config.defaultBucket||F.bucket},Y=this.getOrCreateManifest(F),J=Y.subscribe(X,W);return this.get(X,{manifest:F}).then((Z)=>{console.log(`${this.config.label} NOTIFY (initial) ${j(X)}`),queueMicrotask(()=>{W(Z),Y.poll()})}),J}refresh(){return Promise.all([...this.manifests.values()].map(($)=>$.poll()))}get subscriberCount(){return[...this.manifests.values()].reduce(($,W)=>$+W.subscriberCount,0)}}export{q0 as MPS3};
