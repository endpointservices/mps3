async function A($,J){const z=await crypto.subtle.importKey("raw",typeof $==="string"?b.encode($):$,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]);return crypto.subtle.sign("HMAC",z,b.encode(J))}async function a($){return crypto.subtle.digest("SHA-256",typeof $==="string"?b.encode($):$)}var S=function($){return Array.prototype.map.call(new Uint8Array($),(J)=>("0"+J.toString(16)).slice(-2)).join("")},o=function($){return $.replace(/[!'()*]/g,(J)=>"%"+J.charCodeAt(0).toString(16).toUpperCase())},U$=function($,J){const{hostname:z,pathname:D}=$;if(z.endsWith(".r2.cloudflarestorage.com"))return["s3","auto"];if(z.endsWith(".backblazeb2.com")){const Q=z.match(/^(?:[^.]+\.)?s3\.([^.]+)\.backblazeb2\.com$/);return Q!=null?["s3",Q[1]]:["",""]}const W=z.replace("dualstack.","").match(/([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(?:\.cn)?$/);let[X,Z]=(W||["",""]).slice(1,3);if(Z==="us-gov")Z="us-gov-west-1";else if(Z==="s3"||Z==="s3-accelerate")Z="us-east-1",X="s3";else if(X==="iot")if(z.startsWith("iot."))X="execute-api";else if(z.startsWith("data.jobs.iot."))X="iot-jobs-data";else X=D==="/mqtt"?"iotdevicegateway":"iotdata";else if(X==="autoscaling"){const Q=(J.get("X-Amz-Target")||"").split(".")[0];if(Q==="AnyScaleFrontendService")X="application-autoscaling";else if(Q==="AnyScaleScalingPlannerFrontendService")X="autoscaling-plans"}else if(Z==null&&X.startsWith("s3-"))Z=X.slice(3).replace(/^fips-|^external-1/,""),X="s3";else if(X.endsWith("-fips"))X=X.slice(0,-5);else if(Z&&/-\d$/.test(X)&&!/-\d$/.test(Z))[X,Z]=[Z,X];return[O$[X]||X,Z]},b=new TextEncoder,O$={appstream2:"appstream",cloudhsmv2:"cloudhsm",email:"ses",marketplace:"aws-marketplace",mobile:"AWSMobileHubService",pinpoint:"mobiletargeting",queue:"sqs","git-codecommit":"codecommit","mturk-requester-sandbox":"mturk-requester","personalize-runtime":"personalize"},Y$=new Set(["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id","range","connection"]);class v{constructor({accessKeyId:$,secretAccessKey:J,sessionToken:z,service:D,region:W,cache:X,retries:Z,initRetryMs:Q}){if($==null)throw new TypeError("accessKeyId is a required option");if(J==null)throw new TypeError("secretAccessKey is a required option");this.accessKeyId=$,this.secretAccessKey=J,this.sessionToken=z,this.service=D,this.region=W,this.cache=X||new Map,this.retries=Z!=null?Z:10,this.initRetryMs=Q||50}async sign($,J){if($ instanceof Request){const{method:W,url:X,headers:Z,body:Q}=$;if(J=Object.assign({method:W,url:X,headers:Z},J),J.body==null&&Z.has("Content-Type"))J.body=Q!=null&&Z.has("X-Amz-Content-Sha256")?Q:await $.clone().arrayBuffer();$=X}const z=new t(Object.assign({url:$},J,this,J&&J.aws)),D=Object.assign({},J,await z.sign());delete D.aws;try{return new Request(D.url.toString(),D)}catch(W){if(W instanceof TypeError)return new Request(D.url.toString(),Object.assign({duplex:"half"},D));throw W}}async fetch($,J){for(let z=0;z<=this.retries;z++){const D=fetch(await this.sign($,J));if(z===this.retries)return D;const W=await D;if(W.status<500&&W.status!==429)return W;await new Promise((X)=>setTimeout(X,Math.random()*this.initRetryMs*Math.pow(2,z)))}throw new Error("An unknown error occurred, ensure retries is not negative")}}class t{constructor({method:$,url:J,headers:z,body:D,accessKeyId:W,secretAccessKey:X,sessionToken:Z,service:Q,region:O,cache:Y,datetime:P,signQuery:F,appendSessionToken:H,allHeaders:M,singleEncode:Q$}){if(J==null)throw new TypeError("url is a required option");if(W==null)throw new TypeError("accessKeyId is a required option");if(X==null)throw new TypeError("secretAccessKey is a required option");this.method=$||(D?"POST":"GET"),this.url=new URL(J),this.headers=new Headers(z||{}),this.body=D,this.accessKeyId=W,this.secretAccessKey=X,this.sessionToken=Z;let d,l;if(!Q||!O)[d,l]=U$(this.url,this.headers);if(this.service=Q||d||"",this.region=O||l||"us-east-1",this.cache=Y||new Map,this.datetime=P||(new Date()).toISOString().replace(/[:-]|\.\d{3}/g,""),this.signQuery=F,this.appendSessionToken=H||this.service==="iotdevicegateway",this.headers.delete("Host"),this.service==="s3"&&!this.signQuery&&!this.headers.has("X-Amz-Content-Sha256"))this.headers.set("X-Amz-Content-Sha256","UNSIGNED-PAYLOAD");const G=this.signQuery?this.url.searchParams:this.headers;if(G.set("X-Amz-Date",this.datetime),this.sessionToken&&!this.appendSessionToken)G.set("X-Amz-Security-Token",this.sessionToken);if(this.signableHeaders=["host",...this.headers.keys()].filter((U)=>M||!Y$.has(U)).sort(),this.signedHeaders=this.signableHeaders.join(";"),this.canonicalHeaders=this.signableHeaders.map((U)=>U+":"+(U==="host"?this.url.host:(this.headers.get(U)||"").replace(/\s+/g," "))).join("\n"),this.credentialString=[this.datetime.slice(0,8),this.region,this.service,"aws4_request"].join("/"),this.signQuery){if(this.service==="s3"&&!G.has("X-Amz-Expires"))G.set("X-Amz-Expires","86400");G.set("X-Amz-Algorithm","AWS4-HMAC-SHA256"),G.set("X-Amz-Credential",this.accessKeyId+"/"+this.credentialString),G.set("X-Amz-SignedHeaders",this.signedHeaders)}if(this.service==="s3")try{this.encodedPath=decodeURIComponent(this.url.pathname.replace(/\+/g," "))}catch(U){this.encodedPath=this.url.pathname}else this.encodedPath=this.url.pathname.replace(/\/+/g,"/");if(!Q$)this.encodedPath=encodeURIComponent(this.encodedPath).replace(/%2F/g,"/");this.encodedPath=o(this.encodedPath);const c=new Set;this.encodedSearch=[...this.url.searchParams].filter(([U])=>{if(!U)return!1;if(this.service==="s3"){if(c.has(U))return!1;c.add(U)}return!0}).map((U)=>U.map((x)=>o(encodeURIComponent(x)))).sort(([U,x],[i,n])=>U<i?-1:U>i?1:x<n?-1:x>n?1:0).map((U)=>U.join("=")).join("&")}async sign(){if(this.signQuery){if(this.url.searchParams.set("X-Amz-Signature",await this.signature()),this.sessionToken&&this.appendSessionToken)this.url.searchParams.set("X-Amz-Security-Token",this.sessionToken)}else this.headers.set("Authorization",await this.authHeader());return{method:this.method,url:this.url,headers:this.headers,body:this.body}}async authHeader(){return["AWS4-HMAC-SHA256 Credential="+this.accessKeyId+"/"+this.credentialString,"SignedHeaders="+this.signedHeaders,"Signature="+await this.signature()].join(", ")}async signature(){const $=this.datetime.slice(0,8),J=[this.secretAccessKey,$,this.region,this.service].join();let z=this.cache.get(J);if(!z){const D=await A("AWS4"+this.secretAccessKey,$),W=await A(D,this.region),X=await A(W,this.service);z=await A(X,"aws4_request"),this.cache.set(J,z)}return S(await A(z,await this.stringToSign()))}async stringToSign(){return["AWS4-HMAC-SHA256",this.datetime,this.credentialString,S(await a(await this.canonicalString()))].join("\n")}async canonicalString(){return[this.method.toUpperCase(),this.encodedPath,this.encodedSearch,this.canonicalHeaders+"\n",this.signedHeaders,await this.hexBodyHash()].join("\n")}async hexBodyHash(){let $=this.headers.get("X-Amz-Content-Sha256")||(this.service==="s3"&&this.signQuery?"UNSIGNED-PAYLOAD":null);if($==null){if(this.body&&typeof this.body!=="string"&&!("byteLength"in this.body))throw new Error("body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header");$=S(await a(this.body||""))}return $}}var r=($,J)=>{const z=J.parseFromString($,"text/xml");if(!z)throw new Error(`Invalid XML: ${$}`);const D=z.getElementsByTagName("Contents"),W=(X,Z)=>{const Q=X.getElementsByTagName(Z)[0]?.textContent;return Q?decodeURIComponent(Q.replace(/\+/g," ")):void 0};return{$metadata:{},Contents:Array.from(D).map((X)=>({ETag:W(X,"ETag"),Key:W(X,"Key")})),KeyCount:parseInt(W(z,"KeyCount")),ContinuationToken:W(z,"ContinuationToken"),NextContinuationToken:W(z,"NextContinuationToken"),StartAfter:W(z,"StartAfter")}};var q=async($,{retries:J=Number.MAX_VALUE,delay:z=100,max_delay:D=1e4}={})=>{try{return await $()}catch(W){if(J>0)return await new Promise((X)=>setTimeout(X,z)),q($,{retries:J-1,max_delay:D,delay:Math.min(z*1.5,D)});throw W}};class k{$;J;z;constructor($,J,z){this.fetch=$;this.endpoint=J;this.parser=z}getUrl($,J,z){return`${this.endpoint}/${$}${J?`/${encodeURIComponent(J)}`:""}${z||""}`}async listObjectV2($){for(let J=0;J<10;J++){const z=this.getUrl($.Bucket,void 0,`/?list-type=2&prefix=${$.Prefix}`),D=await q(()=>this.fetch(z,{}));if(D.status===200)return r(await D.text(),this.parser);else if(D.status===429)console.warn("listObjectV2: 429, retrying"),await new Promise((W)=>setTimeout(W,1000));else throw new Error(`Unexpected response: ${D.status} ${await D.text()}`)}throw new Error("Cannot contact server")}async putObject({Bucket:$,Key:J,Body:z,ChecksumSHA256:D}){const W=this.getUrl($,J),X=await q(()=>this.fetch(W,{method:"PUT",body:z,headers:{"Content-Type":"application/json",...D&&{"x-amz-content-sha256":D}}}));if(X.status!==200)throw new Error(`Failed to PUT: ${await X.text()}`);return{$metadata:{httpStatusCode:X.status},ETag:X.headers.get("ETag"),...X.headers.get("x-amz-version-id")&&{VersionId:X.headers.get("x-amz-version-id")}}}async deleteObject({Bucket:$,Key:J}){return{$metadata:{httpStatusCode:(await q(()=>this.fetch(this.getUrl($,J),{method:"DELETE"}))).status}}}async getObject({Bucket:$,Key:J,VersionId:z,IfNoneMatch:D}){const W=this.getUrl($,J,z?`?versionId=${z}`:""),X=await q(()=>this.fetch(W,{method:"GET",headers:{"If-None-Match":D}}));switch(X.status){case 304:throw new Error("304");case 404:return{$metadata:{httpStatusCode:404}};case 403:throw new Error("Access denied");default:{let Z;const Q=X.headers.get("content-type"),O=await X.text();if(Q==="application/json"||O&&O!=="")try{Z=JSON.parse(O)}catch(Y){throw new Error(`Failed to parse response as JSON ${W}`)}return{$metadata:{httpStatusCode:X.status},Body:Z,ETag:X.headers.get("ETag"),...X.headers.get("x-amz-version-id")&&{VersionId:X.headers.get("x-amz-version-id")}}}}}}class L{key;_vals;_keys;constructor($,J){if(this.key=$,this._vals=new Map,this._keys=new Map,J)for(let[z,D]of J)this.set(z,D)}get size(){return this._vals.size}set($,J){const z=this.key($);return this._vals.set(z,J),this._keys.set(z,$),this}get($){return this._vals.get(this.key($))}delete($){const J=this.key($);return this._keys.delete(J),this._vals.delete(J)}has($){return this._vals.has(this.key($))}values(){return this._vals.values()}keys(){return this._keys.values()}forEach($){return this._vals.forEach((J,z,D)=>$(J,this._keys.get(z)))}}var s=()=>`${Date.now()-200}`.padStart(14,"0"),e=()=>`${Date.now()+200}`.padStart(14,"0");var E=async($)=>{const J=Date.now(),z=await $,D=Date.now();return[z,D-J]};var _=()=>crypto.randomUUID();var B=($)=>`${$.bucket}/${$.key}`;var C=function($){return new Promise((J,z)=>{$.oncomplete=$.onsuccess=()=>J($.result),$.onabort=$.onerror=()=>z($.error)})},T=function($,J){const z=indexedDB.open($);z.onupgradeneeded=()=>z.result.createObjectStore(J);const D=C(z);return(W,X)=>D.then((Z)=>X(Z.transaction(J,W).objectStore(J)))},N=function(){if(!g)g=T("keyval-store","keyval");return g},V=function($,J=N()){return J("readonly",(z)=>C(z.get($)))},j=function($,J,z=N()){return z("readwrite",(D)=>{return D.put(J,$),C(D.transaction)})};var $$=function($,J=N()){return J("readonly",(z)=>Promise.all($.map((D)=>C(z.get(D)))))};var J$=function($,J=N()){return J("readwrite",(z)=>{return z.delete($),C(z.transaction)})},R=function($,J=N()){return J("readwrite",(z)=>{return $.forEach((D)=>z.delete(D)),C(z.transaction)})};var P$=function($,J){return $.openCursor().onsuccess=function(){if(!this.result)return;J(this.result),this.result.continue()},C($.transaction)},h=function($=N()){return $("readonly",(J)=>{if(J.getAllKeys)return C(J.getAllKeys());const z=[];return P$(J,(D)=>z.push(D.key)).then(()=>z)})};var g;var B$=6,z$=($)=>`write-${$.toString().padStart(B$,"0")}`;class f{session=_();proposedOperations=new Map;operationLabels=new Map;db;lastIndex=0;load=void 0;constructor($){this.db=$}async propose($,J,z=!1){if(this.proposedOperations.set($,J),this.db){if(this.load&&!z)await this.load,this.proposedOperations.delete($),this.proposedOperations.set($,J);this.lastIndex++;const D=z$(this.lastIndex);$[this.session]=this.lastIndex,await j(D,[...J.entries()].map(([W,X])=>[JSON.stringify(W),X]),this.db),console.log(`STORE ${D} ${JSON.stringify([...J.entries()])}`)}}async label($,J,z=!1){if(this.operationLabels.set(J,$),this.db){if(this.load&&!z)await this.load;const D=$[this.session];if(D===void 0)throw new Error("Cannot label an unproposed operation");const W=`label-${D}`;await j(W,J,this.db),console.log(`STORE ${W} ${J}`)}}async confirm($,J=!1){if(this.operationLabels.has($)){const z=this.operationLabels.get($);if(this.proposedOperations.delete(z),this.operationLabels.delete($),this.db){if(this.load&&!J)await this.load;const D=z[this.session],W=[z$(D),`label-${D}`];await R(W,this.db),console.log(`DEL ${W}`)}}}async cancel($,J=!1){if(this.operationLabels.forEach((z,D)=>{if(z===$)this.operationLabels.delete(D)}),this.proposedOperations.delete($),this.db){if(this.load&&!J)await this.load;const z=$[this.session];await R([`write-${z}`,`label-${z}`],this.db)}}async flatten(){if(this.load)await this.load;const $=new L(B);return this.proposedOperations.forEach((J)=>{J.forEach((z,D)=>{$.set(D,z)})}),$}async restore($,J){return this.db=$,this.proposedOperations.clear(),this.operationLabels.clear(),this.lastIndex=0,this.load=new Promise(async(z)=>{const W=(await h(this.db)).filter((Z)=>Z.startsWith("write-")).sort();console.log("RESTORE",W);const X=await $$(W,this.db);for(let Z=0;Z<W.length;Z++){const Q=parseInt(W[Z].split("-")[1]);this.lastIndex=Math.max(this.lastIndex,Q)}for(let Z=0;Z<W.length;Z++){const Q=W[Z],O=parseInt(Q.split("-")[1]),Y=X[Z].map(([H,M])=>[JSON.parse(H),M]),P=await V(`label-${O}`,this.db);if(!Y)continue;const F=new Map(Y);await J(F,P),await R([`write-${O}`,`label-${O}`],this.db)}z(void 0)}),this.load}}function I($,J){if(J===void 0)return $;if(J===null)return;if(typeof J!=="object"||typeof $!=="object")return J;const z=typeof $==="object"?{...$}:{};for(let D in J)if(J[D]===null)delete z[D];else z[D]=I($[D],J[D]);return z}var w=($)=>JSON.parse(JSON.stringify($));var m="manifest",K={previous:".",files:{},update:{}};class y{$;authoritative_key="";authoritative_state=w(K);optimistic_state=w(K);loading;cache;db;constructor($){this.manifest=$}async restore($){this.db=$,this.loading=V(m,$).then((J)=>{if(J)this.authoritative_state=J,this.optimistic_state=J,this.manifest.service.config.log(`RESTORE ${m}`)})}async getLatest(){if(this.loading)await this.loading;if(this.loading=void 0,!this.manifest.service.config.online)return this.authoritative_state;try{const $=await this.manifest.service._getObject({operation:"POLL_TIME",ref:this.manifest.ref,ifNoneMatch:this.cache?.etag,useCache:!1});if($.$metadata.httpStatusCode===304)return this.authoritative_state;if($.data===void 0)this.authoritative_key=".";else this.authoritative_key=$.data;const[J,z]=await E(this.manifest.service.s3ClientLite.listObjectV2({Bucket:this.manifest.ref.bucket,Prefix:this.manifest.ref.key,StartAfter:this.authoritative_key}));if(this.manifest.service.config.log(`${z}ms LIST ${this.manifest.ref.bucket}/${this.manifest.ref.key}`),J.Contents===void 0)return this.authoritative_state=w(K),this.optimistic_state=w(K),this.authoritative_state;const D=`${this.manifest.ref.key}@${s()}`;for(let W=J.Contents.length-1;W>=0;W--){const X=J.Contents[W].Key;if(X==this.manifest.ref.key)continue;const Z={bucket:this.manifest.ref.bucket,key:X},Q=await this.manifest.service._getObject({operation:"LOOK_BACK",ref:Z});if(Q.data===void 0){await this.manifest.service._deleteObject({operation:"CLEANUP",ref:Z});continue}if(Q.data.previous<D){this.authoritative_key=Q.data.previous,this.authoritative_state=Q.data;break}}for(let W=0;W<J.Contents.length;W++){const X=J.Contents[W].Key;if(X==this.manifest.ref.key)continue;if(X<this.authoritative_key)continue;const Z=await this.manifest.service._getObject({operation:"SWEEP",ref:{bucket:this.manifest.ref.bucket,key:X}}),Q=X.substring(X.lastIndexOf("@")+1);if(Q>=D)this.manifest.service.config.log("Optimistic update"),this.optimistic_state=I(this.optimistic_state,Z.data?.update);else this.authoritative_state=I(this.authoritative_state,Z.data?.update),this.optimistic_state=I(this.optimistic_state,Z.data?.update),this.authoritative_key=X;this.manifest.observeVersionId(Q)}if(this.db)j(m,this.authoritative_state,this.db);return this.authoritative_state}catch($){if($.name==="NoSuchKey")return this.authoritative_state=K,this.authoritative_state;else throw $}}}class D${$;J;z;queue=Promise.resolve();constructor($,J,z){this.ref=$;this.handler=J;this.lastVersion=z}notify($,J,z){this.queue=this.queue.then(()=>z).then((D)=>{if(J!==this.lastVersion)$.config.log(`${$.config.label} NOTIFY ${B(this.ref)} ${J}`),this.lastVersion=J,this.handler(D)})}}class u{$;J;subscribers=new Set;poller;pollInProgress=!1;manifestState=new y(this);operationQueue=new f;constructor($,J){this.service=$;this.ref=J;console.log("Create manifest",B(J))}load($){this.manifestState.restore($),this.operationQueue.restore($,async(J,z)=>{if(!z)await this.service._putAll(J,{manifests:[this.ref],await:"local",isLoad:!0});else await this.updateContent(J,Promise.resolve(new Map([[this.ref,z]])),{await:"local",isLoad:!0})})}observeVersionId($){this.operationQueue.confirm($)}async poll(){if(this.pollInProgress)return;if(this.pollInProgress=!0,this.subscriberCount===0&&this.poller)clearInterval(this.poller),this.poller=void 0;if(this.subscriberCount>0&&!this.poller)this.poller=setInterval(()=>this.poll(),this.service.config.pollFrequency);const $=await this.manifestState.getLatest();if($===void 0){this.pollInProgress=!1;return}const J=await this.operationQueue.flatten();this.subscribers.forEach(async(z)=>{if(J.has(z.ref))z.notify(this.service,"local",Promise.resolve(J.get(z.ref)));else{const D=$.files[B(z.ref)];if(D){const W=this.service._getObject({operation:"GET_CONTENT",ref:z.ref,version:D.version});z.notify(this.service,D.version,W.then((X)=>X.data))}else if(D===null)z.notify(this.service,void 0,Promise.resolve(void 0))}}),this.pollInProgress=!1}updateContent($,J,z){const D=this.operationQueue.propose(J,$,z.isLoad),W=D.then(async()=>{try{const X=await J,Z=await this.manifestState.getLatest();Z.previous=this.manifestState.authoritative_key,Z.update={files:{}};for(let[P,F]of X){const H=B(P);if(F){const M={version:F};Z.update.files[H]=M}else Z.update.files[H]=null}const Q=e()+"_"+_().substring(0,2),O=this.ref.key+"@"+Q;this.operationQueue.label(J,Q,z.isLoad),await this.service._putObject({operation:"PUT_MANIFEST",ref:{key:O,bucket:this.ref.bucket},value:Z});const Y=await this.service._putObject({operation:"PUT_POLL",ref:{key:this.ref.key,bucket:this.ref.bucket},value:this.manifestState.authoritative_key});return this.poll(),Y}catch(X){throw console.error(X),this.operationQueue.cancel(J,z.isLoad),X}});if(z.await==="local")return D;else return W}async getOptimisticVersion($){return await this.manifestState.getLatest(),this.manifestState.optimistic_state.files[B($)]?.version}subscribe($,J){this.service.config.log(`SUBSCRIBE ${B($)} ${this.subscriberCount+1}`);const z=new D$($,J);return this.subscribers.add(z),()=>this.subscribers.delete(z)}get subscriberCount(){return this.subscribers.size}}var W$=async($,J)=>{const z=new URL($),D=new URLSearchParams(z.search),W=z.pathname.split("/"),X=W[1],Z=W.slice(2).join("/"),Q=T(X,"v0");let O,Y=200;if(D.get("list-type")){const P=D.get("prefix")||"";O=`<ListBucketResult>${(await h(Q)).filter((H)=>`${H}`.startsWith(P)).map((H)=>`<Contents><Key>${H}</Key></Contents>`)}</ListBucketResult>`}else if(J?.method==="GET")O=await V(Z,Q),Y=O===void 0?404:200;else if(J?.method==="PUT")O=await J.body,await j(Z,O,Q);else if(J?.method==="DELETE")await J$(Z,Q);else throw new Error;return new Response(O,{status:Y})};async function X$($){const J=(new TextEncoder()).encode($),z=await crypto.subtle.digest("SHA-256",J);return[...new Uint8Array(z)].map((D)=>D.toString(16).padStart(2,"0")).join("")}class Z${static LOCAL_ENDPOINT="indexdb://";config;s3ClientLite;manifests=new L(B);memCache=new L(($)=>`${$.Bucket}${$.Key}${$.VersionId}${$.IfNoneMatch}`);diskCache;endpoint;constructor($){if(this.config={...$,label:$.label||"default",useChecksum:$.useChecksum===!1?!1:!0,online:$.online===!1?!1:!0,offlineStorage:$.offlineStorage===!1?!1:!0,useVersioning:$.useVersioning||!1,pollFrequency:$.pollFrequency||1000,defaultManifest:{bucket:$.defaultManifest?.bucket||$.defaultBucket,key:typeof $.defaultManifest=="string"?$.defaultManifest:$.defaultManifest?.key||"manifest.json"},log:(...z)=>($.log||console.log)(this.config.label,...z)},this.config.s3Config?.credentials instanceof Function)throw Error("We can't do that yet");this.endpoint=$.s3Config.endpoint||`https://s3.${$.s3Config.region}.amazonaws.com`;let J;if(this.config.s3Config?.credentials){const z=new v({accessKeyId:this.config.s3Config.credentials.accessKeyId,secretAccessKey:this.config.s3Config.credentials.secretAccessKey,sessionToken:this.config.s3Config.credentials.sessionToken,region:this.config.s3Config.region||"us-east-1",service:"s3",retries:0});J=(...D)=>z.fetch(...D)}else if(this.endpoint==Z$.LOCAL_ENDPOINT)J=W$;else J=(global||window).fetch.bind(global||window);if(this.config.offlineStorage){const z=`mps3-${this.config.label}`;this.diskCache=T(z,"v0")}this.s3ClientLite=new k(this.config.online?J:()=>new Promise(()=>{}),this.endpoint,$.parser||new DOMParser)}getOrCreateManifest($){if(!this.manifests.has($)){const J=new u(this,$);if(this.manifests.set($,J),this.config.offlineStorage){const z=`mps3-${this.config.label}-${$.bucket}-${$.key}`,D=T(z,"v0");this.config.log(`Restoring manifest from ${z}`),J.load(D)}}return this.manifests.get($)}async get($,J={}){const z={...this.config.defaultManifest,...J.manifest},D=this.getOrCreateManifest(z),W={bucket:$.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof $==="string"?$:$.key},X=await D.operationQueue.flatten();if(X.has(W))return this.config.log(`GET (cached) ${W} ${X.get(W)}`),X.get(W);const Z=await D.getOptimisticVersion(W);if(Z===void 0)return;return(await this._getObject({operation:"GET",ref:W,version:Z})).data}async _getObject($){let J;if(this.config.useVersioning)J={Bucket:$.ref.bucket,Key:$.ref.key,IfNoneMatch:$.ifNoneMatch,...$.version&&{VersionId:$.version}};else J={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,IfNoneMatch:$.ifNoneMatch};const z=`${J.Bucket}${J.Key}${J.VersionId}`;if($.useCache!==!1){if(this.memCache.has(J))return this.memCache.get(J);if(this.diskCache){const W=await V(z,this.diskCache);if(W)return this.config.log(`${$.operation} (disk cached) ${z}`),this.memCache.set(J,Promise.resolve(W)),W}}if(!this.config.online)throw new Error(`${this.config.label} Offline and value not cached for ${z}`);const D=E(this.s3ClientLite.getObject(J)).then(async([W,X])=>{const Z={$metadata:W.$metadata,ETag:W.ETag,data:W.Body};return this.config.log(`${X}ms ${$.operation} ${$.ref.bucket}/${$.ref.key}@${$.version} => ${Z.VersionId}`),Z}).catch((W)=>{if(W?.name==="304")return{$metadata:{httpStatusCode:304},data:void 0};else throw W});if($.useCache!==!1){if(this.memCache.set(J,D),this.diskCache)D.then((W)=>{j(`${J.Bucket}${J.Key}${J.VersionId}`,W,this.diskCache).then(()=>this.config.log(`STORE ${J.Bucket}${J.Key}`))})}return D}async delete($,J={}){return this.putAll(new Map([[$,void 0]]),J)}async put($,J,z={}){return this.putAll(new Map([[$,J]]),z)}async putAll($,J={}){const z=new Map([...$].map(([W,X])=>[{bucket:W.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof W==="string"?W:W.key},X])),D=(J?.manifests||[this.config.defaultManifest]).map((W)=>({...this.config.defaultManifest,...W}));return this._putAll(z,{manifests:D,await:J.await||this.config.online?"remote":"local"})}async _putAll($,J){const z=new Map,D=new Promise(async(W,X)=>{const Z=new Map,Q=[];$.forEach((O,Y)=>{if(O!==void 0){let P=this.config.useVersioning?void 0:_();z.set(Y,O),Q.push(this._putObject({operation:"PUT_CONTENT",ref:Y,value:O,version:P}).then((F)=>{if(this.config.useVersioning)if(F.VersionId===void 0)throw console.error(F),Error(`Bucket ${Y.bucket} is not version enabled!`);else P=F.VersionId;Z.set(Y,P)}))}else Q.push(this._deleteObject({ref:Y}).then((P)=>{Z.set(Y,void 0)}))}),await Promise.all(Q).catch(X),W(Z)});return Promise.all(J.manifests.map((W)=>{return this.getOrCreateManifest(W).updateContent(z,D,{await:J.await,isLoad:J.isLoad===!0})}))}async _putObject($){const J=JSON.stringify($.value,null,2);let z;if(this.config.useVersioning)z={Bucket:$.ref.bucket,Key:$.ref.key,ContentType:"application/json",Body:J,...this.config.useChecksum&&{ChecksumSHA256:await X$(J)}};else z={Bucket:$.ref.bucket,Key:`${$.ref.key}${$.version?`@${$.version}`:""}`,ContentType:"application/json",Body:J,...this.config.useChecksum&&{ChecksumSHA256:await X$(J)}};const[D,W]=await E(this.s3ClientLite.putObject(z));if(this.config.log(`${W}ms ${$.operation} ${z.Bucket}/${z.Key} => ${D.VersionId}`),this.diskCache){const X=`${z.Bucket}${z.Key}${$.version||D.VersionId}`;await j(X,{$metadata:{httpStatusCode:200},etag:D.ETag,data:JSON.parse(J)},this.diskCache).then(()=>this.config.log(`STORE ${X}`))}return D}async _deleteObject($){const J={Bucket:$.ref.bucket,Key:$.ref.key},[z,D]=await E(this.s3ClientLite.deleteObject(J));return this.config.log(`${D}ms ${$.operation||"DELETE"} ${$.ref.bucket}/${$.ref.key} => ${z.VersionId}`),z}subscribe($,J,z){const D={...this.config.defaultManifest,...z?.manifest},W={key:typeof $==="string"?$:$.key,bucket:$.bucket||this.config.defaultBucket||D.bucket},X=this.getOrCreateManifest(D),Z=X.subscribe(W,J);return this.get(W,{manifest:D}).then((Q)=>{this.config.log(`NOTIFY (initial) ${B(W)}`),queueMicrotask(()=>{J(Q,void 0),X.poll()})}).catch((Q)=>{J(void 0,Q)}),Z}refresh(){return Promise.all([...this.manifests.values()].map(($)=>$.poll()))}get subscriberCount(){return[...this.manifests.values()].reduce(($,J)=>$+J.subscriberCount,0)}}export{Z$ as MPS3};
