var M=(W,X)=>()=>(X||W((X={exports:{}}).exports,X),X.exports);var w=M((Y0,g)=>{Y0.serialize=function(W){return W&&typeof W.toJSON==="function"?W.toJSON():W}});var p=M((L0,d)=>{var l=w().serialize;d.exports=function W(X,$){if($=l($),$===null||typeof $!=="object"||Array.isArray($))return $;if(X=l(X),X===null||typeof X!=="object"||Array.isArray(X))X={};var D=Object.keys($);for(var F=0;F<D.length;F++){var J=D[F];if(J==="__proto__"||J==="constructor"||J==="prototype")return X;if($[J]===null){if(X.hasOwnProperty(J))delete X[J]}else X[J]=W(X[J],$[J])}return X}});var o=M((_0,f)=>{f.exports=function W(X,$){if(X===$)return!0;if(X&&$&&typeof X=="object"&&typeof $=="object"){if(X.constructor!==$.constructor)return!1;var D,F,J;if(Array.isArray(X)){if(D=X.length,D!=$.length)return!1;for(F=D;F--!==0;)if(!W(X[F],$[F]))return!1;return!0}if(X.constructor===RegExp)return X.source===$.source&&X.flags===$.flags;if(X.valueOf!==Object.prototype.valueOf)return X.valueOf()===$.valueOf();if(X.toString!==Object.prototype.toString)return X.toString()===$.toString();if(J=Object.keys(X),D=J.length,D!==Object.keys($).length)return!1;for(F=D;F--!==0;)if(!Object.prototype.hasOwnProperty.call($,J[F]))return!1;for(F=D;F--!==0;){var Y=J[F];if(!W(X[Y],$[Y]))return!1}return!0}return X!==X&&$!==$}});var i=M((C0,c)=>{var O0=function(W,X){if(W.length!==X.length)return!1;for(var $=0;$<W.length;$++)if(!G0(X[$],W[$]))return!1;return!0},G0=o(),L=w().serialize;c.exports=function W(X,$){if(X=L(X),$=L($),X===null||$===null||typeof X!=="object"||typeof $!=="object"||Array.isArray(X)!==Array.isArray($))return $;if(Array.isArray(X)){if(!O0(X,$))return $;return}var D={},F=Object.keys(X),J=Object.keys($),Y,Z,O={};for(Z=0;Z<J.length;Z++)if(Y=J[Z],F.indexOf(Y)===-1)O[Y]=!0,D[Y]=L($[Y]);var Q={};for(Z=0;Z<F.length;Z++)if(Y=F[Z],J.indexOf(Y)===-1)Q[Y]=!0,D[Y]=null;else if(X[Y]!==null&&typeof X[Y]==="object"){var q=W(X[Y],$[Y]);if(q!==void 0)D[Y]=q}else if(X[Y]!==$[Y])D[Y]=L($[Y]);return Object.keys(D).length>0?D:void 0}});var s=M((P0,n)=>{n.exports=function W(X,$){if(X===null||$===null||typeof X!=="object"||typeof $!=="object"||Array.isArray(X)!==Array.isArray($))return $;var D=JSON.parse(JSON.stringify(X));return Object.keys($).forEach(function(F){if(X[F]!==void 0)D[F]=W(X[F],$[F]);else D[F]=$[F]}),D}});async function j(W,X){const $=await crypto.subtle.importKey("raw",typeof W==="string"?P.encode(W):W,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]);return crypto.subtle.sign("HMAC",$,P.encode(X))}async function u(W){return crypto.subtle.digest("SHA-256",typeof W==="string"?P.encode(W):W)}var C=function(W){return Array.prototype.map.call(new Uint8Array(W),(X)=>("0"+X.toString(16)).slice(-2)).join("")},h=function(W){return W.replace(/[!'()*]/g,(X)=>"%"+X.charCodeAt(0).toString(16).toUpperCase())},F0=function(W,X){const{hostname:$,pathname:D}=W;if($.endsWith(".r2.cloudflarestorage.com"))return["s3","auto"];if($.endsWith(".backblazeb2.com")){const Z=$.match(/^(?:[^.]+\.)?s3\.([^.]+)\.backblazeb2\.com$/);return Z!=null?["s3",Z[1]]:["",""]}const F=$.replace("dualstack.","").match(/([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(?:\.cn)?$/);let[J,Y]=(F||["",""]).slice(1,3);if(Y==="us-gov")Y="us-gov-west-1";else if(Y==="s3"||Y==="s3-accelerate")Y="us-east-1",J="s3";else if(J==="iot")if($.startsWith("iot."))J="execute-api";else if($.startsWith("data.jobs.iot."))J="iot-jobs-data";else J=D==="/mqtt"?"iotdevicegateway":"iotdata";else if(J==="autoscaling"){const Z=(X.get("X-Amz-Target")||"").split(".")[0];if(Z==="AnyScaleFrontendService")J="application-autoscaling";else if(Z==="AnyScaleScalingPlannerFrontendService")J="autoscaling-plans"}else if(Y==null&&J.startsWith("s3-"))Y=J.slice(3).replace(/^fips-|^external-1/,""),J="s3";else if(J.endsWith("-fips"))J=J.slice(0,-5);else if(Y&&/-\d$/.test(J)&&!/-\d$/.test(Y))[J,Y]=[Y,J];return[$0[J]||J,Y]},P=new TextEncoder,$0={appstream2:"appstream",cloudhsmv2:"cloudhsm",email:"ses",marketplace:"aws-marketplace",mobile:"AWSMobileHubService",pinpoint:"mobiletargeting",queue:"sqs","git-codecommit":"codecommit","mturk-requester-sandbox":"mturk-requester","personalize-runtime":"personalize"},D0=new Set(["authorization","content-type","content-length","user-agent","presigned-expires","expect","x-amzn-trace-id","range","connection"]);class E{constructor({accessKeyId:W,secretAccessKey:X,sessionToken:$,service:D,region:F,cache:J,retries:Y,initRetryMs:Z}){if(W==null)throw new TypeError("accessKeyId is a required option");if(X==null)throw new TypeError("secretAccessKey is a required option");this.accessKeyId=W,this.secretAccessKey=X,this.sessionToken=$,this.service=D,this.region=F,this.cache=J||new Map,this.retries=Y!=null?Y:10,this.initRetryMs=Z||50}async sign(W,X){if(W instanceof Request){const{method:F,url:J,headers:Y,body:Z}=W;if(X=Object.assign({method:F,url:J,headers:Y},X),X.body==null&&Y.has("Content-Type"))X.body=Z!=null&&Y.has("X-Amz-Content-Sha256")?Z:await W.clone().arrayBuffer();W=J}const $=new m(Object.assign({url:W},X,this,X&&X.aws)),D=Object.assign({},X,await $.sign());delete D.aws;try{return new Request(D.url.toString(),D)}catch(F){if(F instanceof TypeError)return new Request(D.url.toString(),Object.assign({duplex:"half"},D));throw F}}async fetch(W,X){for(let $=0;$<=this.retries;$++){const D=fetch(await this.sign(W,X));if($===this.retries)return D;const F=await D;if(F.status<500&&F.status!==429)return F;await new Promise((J)=>setTimeout(J,Math.random()*this.initRetryMs*Math.pow(2,$)))}throw new Error("An unknown error occurred, ensure retries is not negative")}}class m{constructor({method:W,url:X,headers:$,body:D,accessKeyId:F,secretAccessKey:J,sessionToken:Y,service:Z,region:O,cache:Q,datetime:q,signQuery:a,appendSessionToken:e,allHeaders:W0,singleEncode:X0}){if(X==null)throw new TypeError("url is a required option");if(F==null)throw new TypeError("accessKeyId is a required option");if(J==null)throw new TypeError("secretAccessKey is a required option");this.method=W||(D?"POST":"GET"),this.url=new URL(X),this.headers=new Headers($||{}),this.body=D,this.accessKeyId=F,this.secretAccessKey=J,this.sessionToken=Y;let K,I;if(!Z||!O)[K,I]=F0(this.url,this.headers);if(this.service=Z||K||"",this.region=O||I||"us-east-1",this.cache=Q||new Map,this.datetime=q||(new Date()).toISOString().replace(/[:-]|\.\d{3}/g,""),this.signQuery=a,this.appendSessionToken=e||this.service==="iotdevicegateway",this.headers.delete("Host"),this.service==="s3"&&!this.signQuery&&!this.headers.has("X-Amz-Content-Sha256"))this.headers.set("X-Amz-Content-Sha256","UNSIGNED-PAYLOAD");const z=this.signQuery?this.url.searchParams:this.headers;if(z.set("X-Amz-Date",this.datetime),this.sessionToken&&!this.appendSessionToken)z.set("X-Amz-Security-Token",this.sessionToken);if(this.signableHeaders=["host",...this.headers.keys()].filter((G)=>W0||!D0.has(G)).sort(),this.signedHeaders=this.signableHeaders.join(";"),this.canonicalHeaders=this.signableHeaders.map((G)=>G+":"+(G==="host"?this.url.host:(this.headers.get(G)||"").replace(/\s+/g," "))).join("\n"),this.credentialString=[this.datetime.slice(0,8),this.region,this.service,"aws4_request"].join("/"),this.signQuery){if(this.service==="s3"&&!z.has("X-Amz-Expires"))z.set("X-Amz-Expires","86400");z.set("X-Amz-Algorithm","AWS4-HMAC-SHA256"),z.set("X-Amz-Credential",this.accessKeyId+"/"+this.credentialString),z.set("X-Amz-SignedHeaders",this.signedHeaders)}if(this.service==="s3")try{this.encodedPath=decodeURIComponent(this.url.pathname.replace(/\+/g," "))}catch(G){this.encodedPath=this.url.pathname}else this.encodedPath=this.url.pathname.replace(/\/+/g,"/");if(!X0)this.encodedPath=encodeURIComponent(this.encodedPath).replace(/%2F/g,"/");this.encodedPath=h(this.encodedPath);const R=new Set;this.encodedSearch=[...this.url.searchParams].filter(([G])=>{if(!G)return!1;if(this.service==="s3"){if(R.has(G))return!1;R.add(G)}return!0}).map((G)=>G.map((V)=>h(encodeURIComponent(V)))).sort(([G,V],[v,b])=>G<v?-1:G>v?1:V<b?-1:V>b?1:0).map((G)=>G.join("=")).join("&")}async sign(){if(this.signQuery){if(this.url.searchParams.set("X-Amz-Signature",await this.signature()),this.sessionToken&&this.appendSessionToken)this.url.searchParams.set("X-Amz-Security-Token",this.sessionToken)}else this.headers.set("Authorization",await this.authHeader());return{method:this.method,url:this.url,headers:this.headers,body:this.body}}async authHeader(){return["AWS4-HMAC-SHA256 Credential="+this.accessKeyId+"/"+this.credentialString,"SignedHeaders="+this.signedHeaders,"Signature="+await this.signature()].join(", ")}async signature(){const W=this.datetime.slice(0,8),X=[this.secretAccessKey,W,this.region,this.service].join();let $=this.cache.get(X);if(!$){const D=await j("AWS4"+this.secretAccessKey,W),F=await j(D,this.region),J=await j(F,this.service);$=await j(J,"aws4_request"),this.cache.set(X,$)}return C(await j($,await this.stringToSign()))}async stringToSign(){return["AWS4-HMAC-SHA256",this.datetime,this.credentialString,C(await u(await this.canonicalString()))].join("\n")}async canonicalString(){return[this.method.toUpperCase(),this.encodedPath,this.encodedSearch,this.canonicalHeaders+"\n",this.signedHeaders,await this.hexBodyHash()].join("\n")}async hexBodyHash(){let W=this.headers.get("X-Amz-Content-Sha256")||(this.service==="s3"&&this.signQuery?"UNSIGNED-PAYLOAD":null);if(W==null){if(this.body&&typeof this.body!=="string"&&!("byteLength"in this.body))throw new Error("body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header");W=C(await u(this.body||""))}return W}}var k=(W,X)=>{const $=X.parseFromString(W,"text/xml"),D=$.querySelector("ListBucketResult"),F=$.querySelectorAll("Contents"),J=$.querySelector("CommonPrefixes");if(D===null||F===null)throw new Error("Invalid XML");return{IsTruncated:D.querySelector("IsTruncated")?.textContent==="true",Contents:Array.from(F).map((Y)=>({ChecksumAlgorithm:Y.querySelector("ChecksumAlgorithm")?.textContent,ETag:Y.querySelector("ETag")?.textContent,Key:Y.querySelector("Key")?.textContent,LastModified:Y.querySelector("LastModified")?.textContent,Owner:{DisplayName:Y.querySelector("DisplayName")?.textContent,ID:Y.querySelector("ID")?.textContent},RestoreStatus:{IsRestoreInProgress:Y.querySelector("IsRestoreInProgress")?.textContent,RestoreExpiryDate:Y.querySelector("RestoreExpiryDate")?.textContent},Size:Y.querySelector("Size")?.textContent,StorageClass:Y.querySelector("StorageClass")?.textContent})),Name:$.querySelector("Name")?.textContent,Prefix:$.querySelector("Prefix")?.textContent,Delimiter:$.querySelector("Delimiter")?.textContent,MaxKeys:Number.parseInt($.querySelector("MaxKeys")?.textContent),CommonPrefixes:Array.from(J?J.querySelectorAll("Prefix"):[],(Y)=>({Prefix:Y?.textContent})),EncodingType:$.querySelector("EncodingType")?.textContent,KeyCount:Number.parseInt($.querySelector("KeyCount")?.textContent),ContinuationToken:$.querySelector("ContinuationToken")?.textContent,NextContinuationToken:$.querySelector("NextContinuationToken")?.textContent,StartAfter:$.querySelector("StartAfter")?.textContent}};class x{client;endpoint;parser;constructor(W,X,$){this.client=W,this.endpoint=X,this.parser=$}async listObjectV2(W){const X=`${this.endpoint}/${W.Bucket}?list-type=2&prefix=${W.Prefix}`,D=await(await this.client.fetch(X,{})).text();return k(D,this.parser)}async putObject(W){const X=`${this.endpoint}/${W.Bucket}/${W.Key}`,$=await this.client.fetch(X,{method:"PUT",body:W.Body});if($.status!=200)throw new Error("Failed to put object");return{$metadata:{httpStatusCode:$.status},ETag:$.headers.get("ETag"),...$.headers.get("x-amz-version-id")&&{VersionId:$.headers.get("x-amz-version-id")}}}async deleteObject(W){const X=`${this.endpoint}/${W.Bucket}/${W.Key}`;return{$metadata:{httpStatusCode:(await this.client.fetch(X,{method:"DELETE"})).status}}}async getObject(W){const X=`${this.endpoint}/${W.Bucket}/${W.Key}?${W.VersionId?`versionId=${W.VersionId}`:""}`,$=await this.client.fetch(X,{method:"GET",headers:{"If-None-Match":W.IfNoneMatch}});if($.status==304){const F=new Error;throw F.name="304",F}const D=$.status==404?void 0:await $.json();return{$metadata:{httpStatusCode:$.status},Body:D,ETag:$.headers.get("ETag"),...$.headers.get("x-amz-version-id")&&{VersionId:$.headers.get("x-amz-version-id")}}}}class N{key;_vals;_keys;constructor(W,X){if(this.key=W,this._vals=new Map,this._keys=new Map,X)for(let[$,D]of X)this.set($,D)}get size(){return this._vals.size}set(W,X){const $=this.key(W);return this._vals.set($,X),this._keys.set($,W),this}get(W){return this._vals.get(this.key(W))}delete(W){const X=this.key(W);return this._keys.delete(X),this._vals.delete(X)}has(W){return this._vals.has(this.key(W))}values(){return this._vals.values()}keys(){return this._keys.values()}forEach(W){return this._vals.forEach((X,$,D)=>W(X,this._keys.get($)))}}var A=()=>`${Date.now()-200}`.padStart(14,"0"),y=()=>`${Date.now()+200}`.padStart(14,"0");var H=()=>crypto.randomUUID();var B=(W)=>`${W.bucket}/${W.key}`;var _=p(),Q0=i(),B0=s();var U={files:{},update:{}};class t{ref;handler;lastVersion;queue=Promise.resolve();constructor(W,X){this.ref=W,this.handler=X}notify(W,X,$){this.queue=this.queue.then(()=>$).then((D)=>{if(X===this.lastVersion)return;else console.log(`${W} NOTIFY ${B(this.ref)} ${X}`),this.lastVersion=X,this.handler(D)})}}class T{service;ref;subscribers=new Set;poller;cache;pollInProgress=!1;authoritative_key="";authoritative_state=U;optimistic_state=U;pendingWrites=new Map;writtenOperations=new Map;constructor(W,X,$){this.service=W,this.ref=X}observeVersionId(W){if(this.writtenOperations.has(W)){const X=this.writtenOperations.get(W);this.pendingWrites.delete(X),this.writtenOperations.delete(W)}}async get(){return this.getLatest().then((W)=>W||this.cache?.data)}async getLatest(){try{const W=await this.service._getObject({operation:"POLL_TIME",ref:this.ref,ifNoneMatch:this.cache?.etag});if(W.$metadata.httpStatusCode===304)return;if(W.data===void 0)this.authoritative_key=".";else this.authoritative_key=W.data;const X=await this.service.s3ClientLite.listObjectV2({Bucket:this.ref.bucket,Prefix:this.ref.key,StartAfter:this.authoritative_key});if(X.Contents===void 0)return this.authoritative_state=U,this.optimistic_state=U,this.authoritative_state;for(let $=X.Contents.length-1;$>=0;$--){const D=X.Contents[$].Key;if(D==this.ref.key)continue;const F=A(),J=await this.service._getObject({operation:"LOOK_BACK",ref:{bucket:this.ref.bucket,key:D}});if(J.data===void 0)throw new Error("empty data");if(J.data.previous<F){this.authoritative_key=J.data.previous,this.authoritative_state=J.data;break}}for(let $=0;$<X.Contents.length;$++){const D=X.Contents[$].Key;if(D==this.ref.key)continue;const F=await this.service._getObject({operation:"SWEEP",ref:{bucket:this.ref.bucket,key:D}}),J=D.substring(D.lastIndexOf("@")+1),Y=A();if(D<this.authoritative_key);else if(J>=Y)this.optimistic_state=_(this.optimistic_state,F.data?.update);else this.authoritative_state=_(this.authoritative_state,F.data?.update),this.authoritative_key=D;this.observeVersionId(J)}return this.authoritative_state}catch(W){if(W.name==="NoSuchKey")return this.authoritative_state=U,this.authoritative_state;else throw W}}async poll(){if(this.pollInProgress)return;if(this.pollInProgress=!0,this.subscriberCount===0&&this.poller)clearInterval(this.poller),this.poller=void 0;if(this.subscriberCount>0&&!this.poller)this.poller=setInterval(()=>this.poll(),this.service.config.pollFrequency);const W=await this.getLatest();if(W===void 0){this.pollInProgress=!1;return}this.subscribers.forEach(async(X)=>{const $=W.files[B(X.ref)];if($){const D=this.service._getObject({operation:"GET_CONTENT",ref:X.ref,version:$.version});X.notify(this.service.config.label,$.version,D.then((F)=>F.data))}else if($===null)X.notify(this.service.config.label,void 0,Promise.resolve(void 0))}),this.pollInProgress=!1}async updateContent(W,X){this.pendingWrites.set(X,W);try{const $=await X,D=await this.get();D.previous=this.authoritative_key,D.update={files:{}};for(let[Z,O]of $){const Q=B(Z);if(O){const q={version:O};D.update.files[Q]=q}else D.update.files[Q]=null}const F=y()+"_"+H().substring(0,2),J=this.ref.key+"@"+F;await this.service._putObject({operation:"PUT_MANIFEST",ref:{key:J,bucket:this.ref.bucket},value:D});const Y=await this.service._putObject({operation:"PUT_POLL",ref:{key:this.ref.key,bucket:this.ref.bucket},value:this.authoritative_key});return this.writtenOperations.set(F,X),this.poll(),Y}catch($){throw console.error($),this.pendingWrites.delete(X),$}}async getOptimisticVersion(W){return await this.get(),this.optimistic_state.files[B(W)]?.version}subscribe(W,X){console.log(`SUBSCRIBE ${B(W)} ${this.subscriberCount+1}`);const $=new t(W,X);return this.subscribers.add($),()=>this.subscribers.delete($)}get subscriberCount(){return this.subscribers.size}}async function r(W){const X=(new TextEncoder()).encode(W),$=await crypto.subtle.digest("SHA-256",X);return btoa(String.fromCharCode(...new Uint8Array($)))}class q0{config;s3ClientLite;manifests=new N(B);constructor(W){this.config={...W,label:W.label||H().substring(0,3),useChecksum:W.useChecksum===!1?!1:!0,useVersioning:W.useVersioning||!1,pollFrequency:W.pollFrequency||1000,defaultManifest:{bucket:W.defaultManifest?.bucket||W.defaultBucket,key:W.defaultManifest?.key||"manifest.json"}};const X=W.s3Config.endpoint||`https://s3.${W.s3Config.region}.amazonaws.com`;this.s3ClientLite=new x(new E({accessKeyId:this.config.s3Config?.credentials?.accessKeyId,secretAccessKey:this.config.s3Config?.credentials?.secretAccessKey,sessionToken:this.config.s3Config?.credentials?.sessionToken,service:"s3",retries:0}),X,W.parser||new DOMParser)}getOrCreateManifest(W){if(!this.manifests.has(W))this.manifests.set(W,new T(this,W));return this.manifests.get(W)}async get(W,X={}){const $={...this.config.defaultManifest,...X.manifest},D=this.getOrCreateManifest($),F={bucket:W.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof W==="string"?W:W.key};let J=!1,Y=void 0;for(let[O,Q]of D.pendingWrites)if(Q.has(F))J=!0,Y=Q.get(F);if(J)return console.log(`${this.config.label} get (cached) ${B(F)}`),Y;const Z=await D.getOptimisticVersion(F);if(Z===void 0)return;return(await this._getObject({operation:"GET",ref:F,version:Z})).data}getCache=new N((W)=>`${W.Bucket}${W.Key}${W.VersionId}${W.IfNoneMatch}`);async _getObject(W){let X;if(this.config.useVersioning)X={Bucket:W.ref.bucket,Key:W.ref.key,IfNoneMatch:W.ifNoneMatch,...W.version&&{VersionId:W.version}};else X={Bucket:W.ref.bucket,Key:`${W.ref.key}${W.version?`@${W.version}`:""}`,IfNoneMatch:W.ifNoneMatch};if(this.getCache.has(X))return await this.getCache.get(X);const $=this.s3ClientLite.getObject(X).then(async(D)=>{const F={...D,data:D.Body};return console.log(`${this.config.label} ${W.operation} ${W.ref.bucket}/${W.ref.key}@${W.version} => ${F.VersionId} ${F.data}}`),this.getCache.set(X,$),F}).catch((D)=>{if(D?.name==="304")return{$metadata:{httpStatusCode:304},data:void 0};else throw D});return $}async delete(W,X={}){return this.putAll(new Map([[W,void 0]]),X)}async put(W,X,$={}){return this.putAll(new Map([[W,X]]),$)}async putAll(W,X={}){const $=new N(B,[...W].map(([F,J])=>[{bucket:F.bucket||this.config.defaultBucket||this.config.defaultManifest.bucket,key:typeof F==="string"?F:F.key},J])),D=(X?.manifests||[this.config.defaultManifest]).map((F)=>({...this.config.defaultManifest,...F}));return this._putAll($,{manifests:D})}async _putAll(W,X){const $=new Promise(async(D,F)=>{const J=new Map,Y=[];W.forEach((Z,O)=>{if(Z!==void 0){let Q=this.config.useVersioning?void 0:H();Y.push(this._putObject({operation:"PUT_CONTENT",ref:O,value:Z,version:Q}).then((q)=>{if(this.config.useVersioning)if(q.VersionId===void 0)throw console.error(q),Error(`Bucket ${O.bucket} is not version enabled!`);else Q=q.VersionId;J.set(O,Q)}))}else Y.push(this._deleteObject({ref:O}).then((Q)=>{J.set(O,void 0)}))}),await Promise.all(Y).catch(F),D(J)});return Promise.all(X.manifests.map((D)=>{return this.getOrCreateManifest(D).updateContent(W,$)}))}async _putObject(W){const X=JSON.stringify(W.value,null,2);let $;if(this.config.useVersioning)$={Bucket:W.ref.bucket,Key:W.ref.key,ContentType:"application/json",Body:X,...this.config.useChecksum&&{ChecksumSHA256:await r(X)}};else $={Bucket:W.ref.bucket,Key:`${W.ref.key}${W.version?`@${W.version}`:""}`,ContentType:"application/json",Body:X,...this.config.useChecksum&&{ChecksumSHA256:await r(X)}};const D=await this.s3ClientLite.putObject($);return console.log(`${this.config.label} ${W.operation} ${$.Bucket}/${$.Key} => ${D.VersionId}`),D}async _deleteObject(W){const X={Bucket:W.ref.bucket,Key:W.ref.key},$=await this.s3ClientLite.deleteObject(X);return console.log(`${this.config.label} DELETE ${W.ref.bucket}/${W.ref.key} => ${$.VersionId}`),$}subscribe(W,X,$){const D={...this.config.defaultManifest,...$?.manifest},F={key:W,bucket:$?.bucket||this.config.defaultBucket||D.bucket},J=this.getOrCreateManifest(D),Y=J.subscribe(F,X);return this.get(F,{manifest:D}).then((Z)=>{console.log(`${this.config.label} NOTIFY (initial) ${B(F)}`),queueMicrotask(()=>{X(Z),J.poll()})}),Y}refresh(){return Promise.all([...this.manifests.values()].map((W)=>W.poll()))}get subscriberCount(){return[...this.manifests.values()].reduce((W,X)=>W+X.subscriberCount,0)}}export{q0 as MPS3};
